Watcom C/C++ Version 11.0J - README
----------------------------------

この度は、Watcom C/C++ version 11.0をお買い上げいただきありがとうございます。
このREADMEファイルには、ドキュメント作成時に間に合わなかった最新情報ととも
に、製品テスト中に発見した有用な使用上のヒントが書かれています。

最新の変更情報
-----------------------------------------------
1.現バージョンでは、SOMツールキットは本パッケージに含まれていません。
2.WLINKは16ビットDOSおよびNetWareをターゲットとした場合には、インクリ
  メンタルリンクをサポートしていません。formatにDOSまたはNovellを指定した
  場合には、Option Incrementalを指定しないでください。
3.WRCに-frオプションが追加されています。このオプションによって、実行可能
  ファイルに追加するRESファイルを指定できます。
  /fr=name  - EXEファイルに追加する入力RESファイル名の指定
4.PC-98シリーズのWidows 95およびWindows NT上で、DOS、DOS-Extender、16
  ビットWindowsのプログラムをデバッグする場合には、n98bwディレクトリにある
  モジュールをすべてbinwに上書きコピーしてください。この処理をしない場合
  には、IDEから正しいデバッグ環境が構成されません。

再コンパイルが必要な11.0の変更:
-----------------------------------------------
clock()
clock関数の精度は100（チック）目盛り/秒から1,000（チック）目盛り/秒に変更さ
れました（すなわち、CLOCKS_PER_SECが変更になりました）。
clock関数とCLOCKS_PER_SECを使用して、その計算を行うソースコードは、再コン
パイルしてから新しいライブラリでアプリケーションをリンクする必要があります。

バージョン10.6との主な違い:
------------------------------------
以降の節ではWatcom C/C++の以前のリリース・バージョンとの主な違いを要約します。

コンパイラとツールについて、全体的にMicrosoftとの互換性を改善しました。
（エラーの代わりに警告を増やしたこと、MS拡張のサポートなど）
ツールのWin32および32ビットOS/2バージョンの中にはDLL形式で利用できるものも
あります。
      
     EXE      DLL        説明
     ------   -------    -----------------------
     wcc      wccd       16ビット x86 Cコンパイラ
     wcc386   wccd386    32ビット x86 Cコンパイラ
     wpp      wppdi86    16ビット x86 C++コンパイラ
     wpp386   wppd386    32ビット x86 C++コンパイラ
     wlink    wlink      Watcomリンカ
     wlib     wlibd      Watcomライブラリ マネージャ

これによって、統合開発環境やWatcomメイクを使用する場合のパフォーマンスが
より高くなります。詳細については、Watcomメイクの!loaddllプリプロセッサ
擬似命令の説明を参照してください。

C++コンパイラに対する11.0への変更点
------------------------------------
名前空間とRTTI (Run-Time Type Identification:実行時の型識別)のサポートを
追加しました。
プリコンパイルされたヘッダサポートを（より高速に）改善しました。
新しい__int64型の形式で"long long"（64ビット整数）サポートを追加しました。

インライン アセンブラコードの作成方法で、Watcomの補助プラグマの代用
となる手法を追加しました。
具体的には、__asm又は、_asmキーワードの何れかを使用して生成コードに
アセンブリコードを埋め込む事ができます。
この手法でのアセンブリ言語記述内で、プログラム変数に対して値の利用や
結果の代入などの参照が可能ですが、この手法のインプリメンテーション
において、MicrosoftとWatcomの間で以下の相違点があります。
 ・__LOCAL_SIZEは、Watcomではサポートしていません。
 ・構造体の参照は、Watcomではサポートしていません。

Cコンパイラに対する11.0への変更点 
----------------------------------
プリコンパイルされたヘッダサポートを（より高速に）改善しました。
新しい__int64型の形式で"long long"（64ビット整数）サポートを追加しました。

インライン アセンブラコードの作成方法で、Watcomの補助プラグマの代用
となる手法を追加しました。
具体的には、__asm又は、_asmキーワードの何れかを使用して生成コードに
アセンブリコードを埋め込む事ができます。
この手法でのアセンブリ言語記述内で、プログラム変数に対して値の利用や
結果の代入などの参照が可能ですが、この手法のインプリメンテーション
において、MicrosoftとWatcomの間で以下の相違点があります。
 ・__LOCAL_SIZEは、Watcomではサポートしていません。
 ・構造体の参照は、Watcomではサポートしていません。

コード ジェネレータに対する11.0への変更点 
--------------------------------------
新しい最適化、「分岐予測」を追加しました。この最適化は、"ob"または
"ox"コンパイラオプションを指定すると実行されます。コード ジェネレータ
は、ヒューリスティックスに基づいて分岐を予測することによって、キャッシ
ュ利用の密度を向上させます（この最適化は、IntelのPentium Proにとって
は特に重要です）。
インライン アセンブラにマルチメディア拡張（MMX）サポートを追加しました。
新しい__int64型の形式で"long long"（64ビット整数）サポートを追加しました。

Changes to the Compiler Tools for 11.0
コンパイラツールに対する11.0への変更点 
--------------------------------------
Watcomリンカはインクリメンタル リンクをサポートします。
Watcomライブラリマネージャ (WLIB) は、COFFおよびELF形式のオブジェクト
ファイルだけでなくOMF形式、およびその他の形式も処理できます。
 WatcomライブラリマネージャはAR形式（Microsot互換）ライブラリと古い
スタイルのOMFライブラリの両方に対して読込み/書込みを行なうことができ
ます。 デフォルトの出力形式は、AR形式で、これはスイッチで変更できます。
Watcomライブラリマネージャは、いろいろな形式のインポートライブラリを
出力できます。

Watcomアセンブラ（WASM）に、マルチメディア拡張（MMX）サポートを追加
しました。
新しいバージョンのWatcom逆アセンブラ（WDIS）が含まれています。
逆アセンブラはELF、COFFまたはOMFオブジェクトファイルと、ELF、COFF
またはPE形式（Win32）の実行可能形式を処理できます。

古い逆アセンブラ（WDISASM）は削除され、パッケージには含まれていませ
ん。
Microsoftツールをエミュレートする、以下の新しいツールフロントエ
ンドを追加しました。
    nmake
    cl
    link
    lib
    rc
    cvtres
    mapsym

これらのプログラムは、通常のMicrosoft引数を取り、可能な場合には、
それらを同等のWatcom引数に変換し、同等のWatcomツールを起動します。

Watcom Makeは、"ms"オプションを指定すると、Microsoft形式の
メイクファイルを処理します。

C++ライブラリに対する11.0への変更点 
---------------------------------------
ライブラリに対して、マルチバイトとワイドキャラクタ（UNICODEを含む）
サポートを追加しました。
C、Math、およびC++の実行時DLL版ライブラリを含みます。
ライブラリにマルチメディア拡張（MMX）サポートを追加しました。
次の新しい関数がライブラリに追加されました。

mb関数群

clock関数の精度は100チック/秒から1,000チック/秒に変更されました
（すなわち、CLOCKS_PER_SECが変更になりました）。

DOSグラフィックライブラリに対する11.0への変更点 
--------------------------------------------
グラフィックライブラリは、VESAテストを実行してから、ベンダ固有の
グラフィックカードのテストを行います。この修正は、サポートするグ
ラフィックカード数を拡大しようとするものです。

Microsoft Foundation Classesサポートにおける11.0への変更点
--------------------------------------------------------
32ビットMFCのバージョン4.1がパッケージに含まれます。
16ビットMFCのバージョン2.52bがパッケージに含まれます。

Microsoft Win32 SDKサポートにおける11.0への変更点 
-----------------------------------------------
Windows 95およびWindowsNTプラットフォーム用にWIN32 SDKがサポート
されます。

Microsoft DirectX SDK が11.0に含まれています 
------------------------------------------
ゲームソフトを開発するユーザのために、Microsoftから許可された 
DirectX SDKを含んでいます。

Blue Sky社のVisual Programmerにおける11.0への変更 
------------------------------------------------
Visual Programmerの新しい32ビットバージョンがパッケージに含まれ
ます。このバージョンは、32ビットWindows 95とNT上で動作します。
WIN32sサポートがインストールされていれば、16ビットWindows上でも
動作します。Visual Programmerの16ビットバージョンは、パッケージ
には含まれていません。
このバージョンで16ビットアプリケーションの生成もできますが、
その場合、Win95のコントロールの使用を避けるように注意してください。
この新しいバージョンでは、以前のバージョンで明らかになっている
バグを修正しています。


10.6以前のバージョンでの追加・変更点の内容については、
”GETTING STARTED”ヘルプファイルを参照して下さい。


その他の注意:

注意: %DstDir% は、WATCOM C/C++がインストールされているディレクトリを示します。
      %WinSysDir% は、Windows 3.xのsystemディレクトリを示します。
   
1.  32ビットPhar Lap、TNTまたはDOS/4GWアプリケーションをデバッグするとき、
    それぞれ、ファイル"run386.exe"、"tnt.exe"または"dos4gw.exe"がpathに指定
    されたディレクトリにあることを確認してください。対応するファイルがなくて、
    起動に失敗すると、コンピュータがハングアップします。

2. Windows 3.xアプリケーションをデバッグするために、GUIデバッガを使用する
   とき、ある種のWindowsアプリケーションによって、デバッガは予測不能な
   振る舞いをすることがあるかもしれません。典型的な例としては、ウィンドウ
   コールバック関数のある種のメッセージをデバッグするときに起こります。
   例えば、メッセージWM_INITDIALOGを処理するウィンドウ関数のブレイクポイントで
   止まると、システムがクラッシュします。これが起きるときには、キャラクタ
   モード版のデバッガを使用してください。
   
3. "%DstDir%\src\mfc\v252"に入っているWindows 3.x MFC 2.52のサンプルをデバッグ
    するとき、デバッガのソースウィンドウでMFCのソースを見るには、ソース・パス
    に以下のディレクトリを設定してください。
   
   	%DstDir%\src\mfc\v252\*.cpp
	
    同様に、"%DstDir%\src\mfc\v41"に入っているWindows NT MFC 4.1のサンプルを
   デバッグするとき、デバッガのソースウィンドウでMFCのソースを見るには、
   ソース・パスに以下のディレクトリを設定してください。
   
   	%DstDir%\src\mfc\v41\*.cpp
   
   ソース・パスは、"File"メニューの"Source Path"を選ぶことで、変更できます。

4. IDEとともにCodeWrightを使用するためには、"cwright.ini"ファイルを変更する
   必要があります。このファイルには以下の行が含まれています。

	;LibPreload=cwdde.dll

   ';'文字を削除して、コメントになっているこの行を有効にします。IDEのエディタ
   インターフェースDLLとして"weditcw.dll"が選択されているとき、IDEと
   CodeWrightとの間の通信を有効にするために、これは必要とされます。
    
5. ヘルプファイルをハードディスクにインストールしないという選択をすると、
   エディタからCライブラリやMFCライブラリに関するヘルプを見られなくなります。
    
6. パラレル・リモート・デバッグ・サーバーが、OS/2セッションで動作するよう
   になりました。
  
    
7. CodeWrightエディタ・インターフェースを使用するために、ブラウザを設定する
   とき、エディタDLLとして"weditcw.dll"を指定し、新しいオプションを保存し、
   一度、ブラウザを終了して、ブラウザを再起動なければなりません。これを
   しないと、CodeWrightインターフェースDLLで例外エラーが起こります。
   
8. OS/2環境下で、IDEからDOSアプリケーションのデバッグを行う場合、
　 IDEがユーザアプリケーションのデバッグのためのDOSセッションを開始するとき
   に、リモートサーバ・プログラムで必要なサポートファイルを探せるように、
   DOSパスに%DstDir%\binwディレクトリを設定しなければなりません。
   
9.  OS/2のPMアプリケーションをデバッグする場合に、"Comet cursor"デスクトップ
    の設定がディスエィブルになっていることを確認して下さい。
    通常、この設定はディスエィブルになっています。
   
10. OS/2リソース・コンパイラ（RC.EXE）が含まれているディレクトリのPATH環境
    変数へのパス設定が、あまりにも後ろに（251文字以降）ある場合、OS/2リソ
    ース・コンパイラは正常に動作しません。RC.EXEで問題が発生した場合は、
    CONFIG.SYSファイルのPATH環境変数で、%WATCOM%\BINPと%WATCOM%\BINWディレ
    クトリを、パスリストのより前方で設定するように変更して下さい。
   
Blue Sky社の Visual Programmer 2.50の使用方法
-------------------------------------

Visual Programmer バージョン 2.50 は、32ビットWindowsプログラムです。 
Windows NT, Windows 95 又は Win32s環境下で動作します。

以下に、Visual Programmerでアプリケーションを作成するための概略手順を示
します。

1. Watcom IDEを起動します。

2. [File]メニューから、[New project]メニュー項目を選択します。

3. "Enter Project Filename" ダイアログで、
　 ディレクトリとプロジェクトファイル名を選択します。
   
	例: 　c:\tmp\test.wpj
	
   <OK>を押します。

4. "New Target" ダイアログで、   
   ターゲットのタイプとして "MFC - 32-bit (4.1)" 或いは、
　 "MFC - 16-bit (2.52)" のどちらかをクリックして選択します。
   
   ターゲットファイル名をキー入力します。
　この名前（拡張子を除いた）は、これからビルドする実行可能ファイルの
  名前としても使用されます。
   
   
	例: c:\tmp\test.tgt
	
   <OK>を押します。
    
5. IDEの[Targets]メニューから、[Visual Programmer]メニュー項目を選択して、
　 Visual Programmerを起動します。
    
6. Visual Programmer の"New" ダイアログで、ユーザアプリケーションの
   作成開始点としてアプリケーション テンプレートを選択します。  
   ワークディレクトリやファイル名は、Watcom IDE内でのターゲットファイルの
   指定や位置に基づいて決定されます。
   選択が終わったら <OK> を押します。
    
7. Visual Programmerを使用して、アプリケーションを作成します。    

   詳細については、Visual Programmer ヘルプを参照して下さい。
	
   必ず、"Quick Run"オプションで試して確認します。
   これでコードを全く生成せずにプログラムの外観のテストを行えます。
    
8. [Return to Watcom IDE]ツールバーボタンを押してIDEに戻ります。
   コードの生成作業を終了するまで、Visual programmerをシャットダウン
   しないでください。
   Windows 95の環境下の場合、IDEに戻るにはタスクバーを使用して下さい。

9. [Make the Current Target]ツールバーボタンを押すか、又は[Target]メニュー
   から[Make]メニュー項目を選択します。
    
10. 以下のVisual Programmerのメッセージボックスが表示されたら、

    "Save and Generate code for current design"
    
    <Yes>を押します。  この操作はVisual Programmerで、"Save & Generate code"
    オプションを選択する事と同等です。

11. Visual Programmerのウインドウが前面に出てきて、アプリケーションのコード
    が生成されます。

12. IDEウインドウが前面に戻ってくると、プログラムのコンパイル及びリンクの
    処理が遂行され、実行可能ファイルが作成されます。
