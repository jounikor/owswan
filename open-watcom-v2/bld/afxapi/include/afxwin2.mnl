/*
 *  afxwin2.inl Inline implementation of functions declared in afxwin.h
 *
:include crwatcnt.sp
 */

AFX_INLINE BOOL CMenu::AppendMenu( UINT nFlags, UINT_PTR nIDNewItem,
                                   LPCTSTR lpszNewItem )
/******************************************************/
{
    return( ::AppendMenu( m_hMenu, nFlags, nIDNewItem, lpszNewItem ) );
}

AFX_INLINE BOOL CMenu::AppendMenu( UINT nFlags, UINT_PTR nIDNewItem,
                                   const CBitmap *pBmp )
/******************************************************/
{
    return( ::AppendMenu( m_hMenu, nFlags | MF_BITMAP, nIDNewItem,
                          (LPCTSTR)(HBITMAP)pBmp->GetSafeHandle() ) );
}

AFX_INLINE UINT CMenu::CheckMenuItem( UINT nIDCheckItem, UINT nCheck )
/********************************************************************/
{
    return( ::CheckMenuItem( m_hMenu, nIDCheckItem, nCheck ) );
}

AFX_INLINE BOOL CMenu::CheckMenuRadioItem( UINT nIDFirst, UINT nIDLast, UINT nIDItem,
                                           UINT nFlags )
/******************************************************/
{
    return( ::CheckMenuRadioItem( m_hMenu, nIDFirst, nIDLast, nIDItem, nFlags ) );
}

AFX_INLINE BOOL CMenu::CreateMenu()
/*********************************/
{
    return( Attach( ::CreateMenu() ) );
}

AFX_INLINE BOOL CMenu::CreatePopupMenu()
/**************************************/
{
    return( Attach( ::CreatePopupMenu() ) );
}

AFX_INLINE BOOL CMenu::DeleteMenu( UINT nPosition, UINT nFlags )
/**************************************************************/
{
    return( ::DeleteMenu( m_hMenu, nPosition, nFlags ) );
}

AFX_INLINE BOOL CMenu::DestroyMenu()
/**********************************/
{
    return( ::DestroyMenu( Detach() ) );
}

AFX_INLINE UINT CMenu::EnableMenuItem( UINT nIDEnableItem, UINT nEnable )
/***********************************************************************/
{
    return( ::EnableMenuItem( m_hMenu, nIDEnableItem, nEnable ) );
}

AFX_INLINE UINT CMenu::GetDefaultItem( UINT gmdiFlags, BOOL fByPos )
/******************************************************************/
{
    return( ::GetMenuDefaultItem( m_hMenu, fByPos, gmdiFlags ) );
}

AFX_INLINE DWORD CMenu::GetMenuContextHelpId() const
/**************************************************/
{
    return( ::GetMenuContextHelpId( m_hMenu ) );
}

AFX_INLINE UINT CMenu::GetMenuItemCount() const
/*********************************************/
{
    return( ::GetMenuItemCount( m_hMenu ) );
}

AFX_INLINE UINT CMenu::GetMenuItemID( int nPos ) const
/****************************************************/
{
    return( ::GetMenuItemID( m_hMenu, nPos ) );
}

AFX_INLINE BOOL CMenu::GetMenuItemInfo( UINT uItem, LPMENUITEMINFO lpMenuItemInfo,
                                        BOOL fByPos )
/***************************************************/
{
    return( ::GetMenuItemInfo( m_hMenu, uItem, fByPos, lpMenuItemInfo ) );
}

AFX_INLINE UINT CMenu::GetMenuState( UINT nID, UINT nFlags ) const
/****************************************************************/
{
    return( ::GetMenuState( m_hMenu, nID, nFlags ) );
}

AFX_INLINE int CMenu::GetMenuString( UINT nIDItem, LPTSTR lpString, int nMaxCount,
                                     UINT nFlags ) const
/******************************************************/
{
    return( ::GetMenuString( m_hMenu, nIDItem, lpString, nMaxCount, nFlags ) );
}

AFX_INLINE int CMenu::GetMenuString( UINT nIDItem, CString &rString, UINT nFlags ) const
/**************************************************************************************/
{
    LPTSTR lpString = rString.GetBuffer( 256 );
    int nResult = ::GetMenuString( m_hMenu, nIDItem, lpString, 255, nFlags );
    rString.ReleaseBuffer( nResult );
    return( nResult );
}

AFX_INLINE HMENU CMenu::GetSafeHmenu() const
/******************************************/
{
    return( this == NULL ? NULL : m_hMenu );
}

AFX_INLINE CMenu *CMenu::GetSubMenu( int nPos ) const
/***************************************************/
{
    return( FromHandle( ::GetSubMenu( m_hMenu, nPos ) ) );
}

AFX_INLINE BOOL CMenu::InsertMenu( UINT nPosition, UINT nFlags, UINT_PTR nIDNewItem,
                                   LPCTSTR lpszNewItem )
/******************************************************/
{
    return( ::InsertMenu( m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem ) );
}

AFX_INLINE BOOL CMenu::InsertMenu( UINT nPosition, UINT nFlags, UINT_PTR nIDNewItem,
                                   const CBitmap *pBmp )
/******************************************************/
{
    return( ::InsertMenu( m_hMenu, nPosition, nFlags | MF_BITMAP, nIDNewItem,
                          (LPCTSTR)(HBITMAP)pBmp->GetSafeHandle() ) );
}

AFX_INLINE BOOL CMenu::InsertMenuItem( UINT uItem, LPMENUITEMINFO lpMenuItemInfo,
                                       BOOL fByPos )
/**************************************************/
{
    return( ::InsertMenuItem( m_hMenu, uItem, fByPos, lpMenuItemInfo ) );
}

AFX_INLINE BOOL CMenu::LoadMenu( LPCTSTR lpszResourceName )
/*********************************************************/
{
    return( Attach( ::LoadMenu( AfxGetResourceHandle(), lpszResourceName ) ) );
}

AFX_INLINE BOOL CMenu::LoadMenu( UINT nIDResource )
/*************************************************/
{
    return( Attach( ::LoadMenu( AfxGetResourceHandle(),
                                MAKEINTRESOURCE( nIDResource ) ) ) );
}

AFX_INLINE BOOL CMenu::LoadMenuIndirect( const void *lpMenuTemplate )
/*******************************************************************/
{
    return( Attach( ::LoadMenuIndirect( lpMenuTemplate ) ) );
}

AFX_INLINE BOOL CMenu::ModifyMenu( UINT nPosition, UINT nFlags, UINT_PTR nIDNewItem,
                                   LPCTSTR lpszNewItem )
/******************************************************/
{
    return( ::ModifyMenu( m_hMenu, nPosition, nFlags, nIDNewItem, lpszNewItem ) );
}

AFX_INLINE BOOL CMenu::ModifyMenu( UINT nPosition, UINT nFlags, UINT_PTR nIDNewItem,
                                   const CBitmap *pBmp )
/******************************************************/
{
    return( ::ModifyMenu( m_hMenu, nPosition, nFlags | MF_BITMAP, nIDNewItem,
                          (LPCTSTR)(HBITMAP)pBmp->GetSafeHandle() ) );
}

AFX_INLINE BOOL CMenu::RemoveMenu( UINT nPosition, UINT nFlags )
/**************************************************************/
{
    return( ::RemoveMenu( m_hMenu, nPosition, nFlags ) );
}

AFX_INLINE BOOL CMenu::SetDefaultItem( UINT uItem, BOOL fByPos )
/**************************************************************/
{
    return( ::SetMenuDefaultItem( m_hMenu, uItem, fByPos ) );
}

AFX_INLINE BOOL CMenu::SetMenuContextHelpId( DWORD dwContextHelpId )
/******************************************************************/
{
    return( ::SetMenuContextHelpId( m_hMenu, dwContextHelpId ) );
}

AFX_INLINE BOOL CMenu::SetMenuItemBitmaps( UINT nPosition, UINT nFlags,
                                           const CBitmap *pBmpUnchecked,
                                           const CBitmap *pBmpChecked )
/*********************************************************************/
{
    return( ::SetMenuItemBitmaps( m_hMenu, nPosition, nFlags,
                                  (HBITMAP)pBmpUnchecked->GetSafeHandle(),
                                  (HBITMAP)pBmpChecked->GetSafeHandle() ) );
}

AFX_INLINE BOOL CMenu::SetMenuItemInfo( UINT uItem, LPMENUITEMINFO lpMenuItemInfo,
                                        BOOL fByPos )
/***************************************************/
{
    return( ::SetMenuItemInfo( m_hMenu, uItem, fByPos, lpMenuItemInfo ) );
}

AFX_INLINE BOOL CMenu::operator!=( const CMenu &menu ) const
/**********************************************************/
{
    return( m_hMenu != menu.m_hMenu );
}

AFX_INLINE BOOL CMenu::operator==( const CMenu &menu ) const
/**********************************************************/
{
    return( m_hMenu == menu.m_hMenu );
}

AFX_INLINE CMenu::operator HMENU() const
/**************************************/
{
    return( this == NULL ? NULL : m_hMenu );
}

AFX_INLINE void CCmdTarget::BeginWaitCursor()
/*******************************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( 1 );
}

AFX_INLINE void CCmdTarget::EndWaitCursor()
/*****************************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( -1 );
}

AFX_INLINE void CCmdTarget::RestoreWaitCursor()
/*********************************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( 0 );
}

AFX_INLINE void CCmdUI::ContinueRouting()
/***************************************/
{
    m_bContinueRouting = TRUE;
}

AFX_INLINE UINT CWnd::ArrangeIconicWindows()
/******************************************/
{
    return( ::ArrangeIconicWindows( m_hWnd ) );
}

AFX_INLINE CDC *CWnd::BeginPaint( LPPAINTSTRUCT lpPaint )
/*******************************************************/
{
    return( CDC::FromHandle( ::BeginPaint( m_hWnd, lpPaint ) ) );
}

AFX_INLINE void CWnd::BringWindowToTop()
/**************************************/
{
    ::BringWindowToTop( m_hWnd );
}

AFX_INLINE BOOL CWnd::ChangeClipboardChain( HWND hWndNext )
/*********************************************************/
{
    return( ::ChangeClipboardChain( m_hWnd, hWndNext ) );
}

AFX_INLINE void CWnd::CheckDlgButton( int nIDButton, UINT nCheck )
/****************************************************************/
{
    ::CheckDlgButton( m_hWnd, nIDButton, nCheck );
}

AFX_INLINE void CWnd::CheckRadioButton( int nIDFirstButton, int nIDLastButton,
                                        int nIDCheckButton )
/**********************************************************/
{
    ::CheckRadioButton( m_hWnd, nIDFirstButton, nIDLastButton, nIDCheckButton );
}

AFX_INLINE CWnd *CWnd::ChildWindowFromPoint( POINT point ) const
/**************************************************************/
{
    return( CWnd::FromHandle( ::ChildWindowFromPoint( m_hWnd, point ) ) );
}

AFX_INLINE CWnd *CWnd::ChildWindowFromPoint( POINT point, UINT nFlags ) const
/***************************************************************************/
{
    return( CWnd::FromHandle( ::ChildWindowFromPointEx( m_hWnd, point, nFlags ) ) );
}

AFX_INLINE void CWnd::ClientToScreen( LPPOINT lpPoint ) const
/***********************************************************/
{
    ::ClientToScreen( m_hWnd, lpPoint );
}

AFX_INLINE void CWnd::ClientToScreen( LPRECT lpRect ) const
/*********************************************************/
{
    ::ClientToScreen( m_hWnd, (LPPOINT)lpRect );
    ::ClientToScreen( m_hWnd, (LPPOINT)lpRect + 1 );
}

AFX_INLINE void CWnd::CloseWindow()
/*********************************/
{
    ::CloseWindow( m_hWnd );
}

AFX_INLINE void CWnd::CreateCaret( CBitmap *pBitmap )
/***************************************************/
{
    ::CreateCaret( m_hWnd, (HBITMAP)pBitmap->GetSafeHandle(), 0, 0 );
}

AFX_INLINE void CWnd::CreateGrayCaret( int nWidth, int nHeight )
/**************************************************************/
{
    ::CreateCaret( m_hWnd, (HBITMAP)1, nWidth, nHeight );
}

AFX_INLINE void CWnd::CreateSolidCaret( int nWidth, int nHeight )
/***************************************************************/
{
    ::CreateCaret( m_hWnd, NULL, nWidth, nHeight );
}

AFX_INLINE int CWnd::DlgDirList( LPTSTR lpPathSpec, int nIDListBox, int nIDStaticPath,
                                 UINT nFileType )
/***********************************************/
{
    return( ::DlgDirList( m_hWnd, lpPathSpec, nIDListBox, nIDStaticPath, nFileType ) );
}

AFX_INLINE int CWnd::DlgDirListComboBox( LPTSTR lpPathSpec, int nIDComboBox,
                                         int nIDStaticPath, UINT nFileType )
/**************************************************************************/
{
    return( ::DlgDirListComboBox( m_hWnd, lpPathSpec, nIDComboBox, nIDStaticPath,
                                  nFileType ) );
}

AFX_INLINE BOOL CWnd::DlgDirSelect( LPTSTR lpString, int nIDListBox )
/*******************************************************************/
{
    return( ::DlgDirSelectEx( m_hWnd, lpString, MAX_PATH, nIDListBox ) );
}

AFX_INLINE BOOL CWnd::DlgDirSelectComboBox( LPTSTR lpString, int nIDComboBox )
/****************************************************************************/
{
    return( ::DlgDirSelectComboBoxEx( m_hWnd, lpString, MAX_PATH, nIDComboBox ) );
}

AFX_INLINE void CWnd::DragAcceptFiles( BOOL bAccept )
/***************************************************/
{
    ::DragAcceptFiles( m_hWnd, bAccept );
}

AFX_INLINE BOOL CWnd::DragDetect( POINT pt ) const
/************************************************/
{
    return( ::DragDetect( m_hWnd, pt ) );
}

AFX_INLINE BOOL CWnd::DrawAnimatedRects( int idAni, CONST RECT *lprcFrom,
                                         CONST RECT *lprcTo )
/***********************************************************/
{
    return( ::DrawAnimatedRects( m_hWnd, idAni, lprcFrom, lprcTo ) );
}

AFX_INLINE BOOL CWnd::DrawCaption( CDC *pDC, LPCRECT lprc, UINT uFlags )
/**********************************************************************/
{
    return( ::DrawCaption( m_hWnd, pDC->GetSafeHdc(), lprc, uFlags ) );
}

AFX_INLINE void CWnd::DrawMenuBar()
/*********************************/
{
    ::DrawMenuBar( m_hWnd );
}

AFX_INLINE BOOL CWnd::EnableWindow( BOOL bEnable )
/************************************************/
{
    return( ::EnableWindow( m_hWnd, bEnable ) );
}

AFX_INLINE void CWnd::EndPaint( LPPAINTSTRUCT lpPaint )
/*****************************************************/
{
    ::EndPaint( m_hWnd, lpPaint );
}

AFX_INLINE BOOL CWnd::FlashWindow( BOOL bInvert )
/***********************************************/
{
    return( ::FlashWindow( m_hWnd, bInvert ) );
}

AFX_INLINE void CWnd::GetClientRect( LPRECT lpRect ) const
/********************************************************/
{
    ::GetClientRect( m_hWnd, lpRect );
}

AFX_INLINE CDC *CWnd::GetDC()
/***************************/
{
    return( CDC::FromHandle( ::GetDC( m_hWnd ) ) );
}

AFX_INLINE CDC *CWnd::GetDCEx( CRgn *prgnClip, DWORD flags )
/**********************************************************/
{
    return( CDC::FromHandle( ::GetDCEx( m_hWnd, (HRGN)prgnClip->GetSafeHandle(),
                                        flags ) ) );
}

AFX_INLINE int CWnd::GetDlgCtrlID() const
/***************************************/
{
    return( ::GetDlgCtrlID( m_hWnd ) );
}

AFX_INLINE CWnd *CWnd::GetDlgItem( int nID ) const
/************************************************/
{
    return( CWnd::FromHandle( ::GetDlgItem( m_hWnd, nID ) ) );
}

AFX_INLINE void CWnd::GetDlgItem( int nID, HWND *phWnd ) const
/************************************************************/
{
    ASSERT( phWnd != NULL );
    *phWnd = ::GetDlgItem( m_hWnd, nID );
}

AFX_INLINE UINT CWnd::GetDlgItemInt( int nID, BOOL *lpTrans, BOOL bSigned ) const
/*******************************************************************************/
{
    return( ::GetDlgItemInt( m_hWnd, nID, lpTrans, bSigned ) );
}

AFX_INLINE int CWnd::GetDlgItemText( int nID, LPTSTR lpStr, int nMaxCount ) const
/*******************************************************************************/
{
    return( ::GetDlgItemText( m_hWnd, nID, lpStr, nMaxCount ) );
}

AFX_INLINE int CWnd::GetDlgItemText( int nID, CString &rString ) const
/********************************************************************/
{
    LPTSTR lpStr = rString.GetBuffer( 256 );
    int nResult = ::GetDlgItemText( m_hWnd, nID, lpStr, 255 );
    rString.ReleaseBuffer( nResult );
    return( nResult );
}

AFX_INLINE DWORD CWnd::GetExStyle() const
/***************************************/
{
    return( ::GetWindowLong( m_hWnd, GWL_EXSTYLE ) );
}

AFX_INLINE CWnd *CWnd::GetLastActivePopup() const
/***********************************************/
{
    return( CWnd::FromHandle( ::GetLastActivePopup( m_hWnd ) ) );
}

AFX_INLINE CMenu *CWnd::GetMenu() const
/*************************************/
{
    return( CMenu::FromHandle( ::GetMenu( m_hWnd ) ) );
}

AFX_INLINE CWnd *CWnd::GetNextDlgGroupItem( CWnd *pWndCtl, BOOL bPrevious ) const
/*******************************************************************************/
{
    return( CWnd::FromHandle( ::GetNextDlgGroupItem( m_hWnd, pWndCtl->GetSafeHwnd(),
                                                     bPrevious ) ) );
}

AFX_INLINE CWnd *CWnd::GetNextDlgTabItem( CWnd *pWndCtl, BOOL bPrevious ) const
/*****************************************************************************/
{
    return( CWnd::FromHandle( ::GetNextDlgTabItem( m_hWnd, pWndCtl->GetSafeHwnd(),
                                                   bPrevious ) ) );
}

AFX_INLINE CWnd *CWnd::GetParent() const
/**************************************/
{
    return( CWnd::FromHandle( ::GetParent( m_hWnd ) ) );
}

AFX_INLINE HWND CWnd::GetSafeHwnd() const
/***************************************/
{
    return( this == NULL ? NULL : m_hWnd );
}

AFX_INLINE DWORD CWnd::GetStyle() const
/*************************************/
{
    return( ::GetWindowLong( m_hWnd, GWL_STYLE ) );
}

AFX_INLINE CMenu *CWnd::GetSystemMenu( BOOL bRevert ) const
/*********************************************************/
{
    return( CMenu::FromHandle( ::GetSystemMenu( m_hWnd, bRevert ) ) );
}

AFX_INLINE CWnd *CWnd::GetTopWindow() const
/*****************************************/
{
    return( CWnd::FromHandle( ::GetTopWindow( m_hWnd ) ) );
}

AFX_INLINE BOOL CWnd::GetUpdateRect( LPRECT lpRect, BOOL bErase )
/***************************************************************/
{
    return( ::GetUpdateRect( m_hWnd, lpRect, bErase ) );
}

AFX_INLINE int CWnd::GetUpdateRgn( CRgn *pRgn, BOOL bErase )
/**********************************************************/
{
    return( ::GetUpdateRgn( m_hWnd, (HRGN)pRgn->GetSafeHandle(), bErase ) );
}

AFX_INLINE CWnd *CWnd::GetWindow( int nCmd ) const
/**********************************************/
{
    return( CWnd::FromHandle( ::GetWindow( m_hWnd, nCmd ) ) );
}

AFX_INLINE DWORD CWnd::GetWindowContextHelpId() const
/***************************************************/
{
    return( ::GetWindowContextHelpId( m_hWnd ) );
}

AFX_INLINE CDC *CWnd::GetWindowDC()
/*********************************/
{
    return( CDC::FromHandle( ::GetWindowDC( m_hWnd ) ) );
}

AFX_INLINE BOOL CWnd::GetWindowPlacement( WINDOWPLACEMENT *lpwndpl ) const
/************************************************************************/
{
    return( ::GetWindowPlacement( m_hWnd, lpwndpl ) );
}

AFX_INLINE void CWnd::GetWindowRect( LPRECT lpRect ) const
/********************************************************/
{
    ::GetWindowRect( m_hWnd, lpRect );
}

AFX_INLINE int CWnd::GetWindowRgn( HRGN hRgn ) const
/**************************************************/
{
    return( ::GetWindowRgn( m_hWnd, hRgn ) );
}

AFX_INLINE int CWnd::GetWindowText( LPTSTR lpszStringBuf, int nMaxCount ) const
/*****************************************************************************/
{
    return( ::GetWindowText( m_hWnd, lpszStringBuf, nMaxCount ) );
}

AFX_INLINE int CWnd::GetWindowText( CString &rString ) const
/**********************************************************/
{
    int nLength = ::GetWindowTextLength( m_hWnd );
    LPTSTR lpszStringBuf = rString.GetBuffer( nLength + 1 );
    nLength = ::GetWindowText( m_hWnd, lpszStringBuf, nLength + 1 );
    rString.ReleaseBuffer( nLength );
    return( nLength );
}

AFX_INLINE int CWnd::GetWindowTextLength() const
/**********************************************/
{
    return( ::GetWindowTextLength( m_hWnd ) );
}

AFX_INLINE void CWnd::HideCaret()
/*******************************/
{
    ::HideCaret( m_hWnd );
}

AFX_INLINE BOOL CWnd::HiliteMenuItem( CMenu *pMenu, UINT nIDHiliteItem, UINT nHilite )
/************************************************************************************/
{
    return( ::HiliteMenuItem( m_hWnd, pMenu->GetSafeHmenu(), nIDHiliteItem, nHilite ) );
}

AFX_INLINE void CWnd::Invalidate( BOOL bErase )
/*********************************************/
{
    ::InvalidateRect( m_hWnd, NULL, bErase );
}

AFX_INLINE void CWnd::InvalidateRect( LPCRECT lpRect, BOOL bErase )
/*****************************************************************/
{
    ::InvalidateRect( m_hWnd, lpRect, bErase );
}

AFX_INLINE void CWnd::InvalidateRgn( CRgn *pRgn, BOOL bErase )
/************************************************************/
{
    ::InvalidateRgn( m_hWnd, (HRGN)pRgn->GetSafeHandle(), bErase );
}

AFX_INLINE BOOL CWnd::IsChild( const CWnd *pWnd ) const
/*****************************************************/
{
    return( ::IsChild( m_hWnd, pWnd->GetSafeHwnd() ) );
}

AFX_INLINE BOOL CWnd::IsDialogMessage( LPMSG lpMsg )
/**************************************************/
{
    return( ::IsDialogMessage( m_hWnd, lpMsg ) );
}

AFX_INLINE UINT CWnd::IsDlgButtonChecked( int nIDButton ) const
/*************************************************************/
{
    return( ::IsDlgButtonChecked( m_hWnd, nIDButton ) );
}

AFX_INLINE BOOL CWnd::IsIconic() const
/************************************/
{
    return( ::IsIconic( m_hWnd ) );
}

AFX_INLINE BOOL CWnd::IsWindowEnabled() const
/*******************************************/
{
    return( ::IsWindowEnabled( m_hWnd ) );
}

AFX_INLINE BOOL CWnd::IsWindowVisible() const
/*******************************************/
{
    return( ::IsWindowVisible( m_hWnd ) );
}

AFX_INLINE BOOL CWnd::IsZoomed() const
/************************************/
{
    return( ::IsZoomed( m_hWnd ) );
}

AFX_INLINE BOOL CWnd::KillTimer( UINT_PTR nIDTimer )
/**************************************************/
{
    return( ::KillTimer( m_hWnd, nIDTimer ) );
}

AFX_INLINE BOOL CWnd::LockWindowUpdate()
/**************************************/
{
    return( ::LockWindowUpdate( m_hWnd ) );
}

AFX_INLINE void CWnd::MapWindowPoints( CWnd *pwndTo, LPRECT lpRect ) const
/************************************************************************/
{
    ::MapWindowPoints( m_hWnd, pwndTo->GetSafeHwnd(), (LPPOINT)lpRect, 2 );
}

AFX_INLINE void CWnd::MapWindowPoints( CWnd *pwndTo, LPPOINT lpPoint, UINT uCount ) const
/***************************************************************************************/
{
    ::MapWindowPoints( m_hWnd, pwndTo->GetSafeHwnd(), lpPoint, uCount );
}

AFX_INLINE int CWnd::MessageBox( LPCTSTR lpszText, LPCTSTR lpszCaption, UINT nType )
/**********************************************************************************/
{
    return( ::MessageBox( m_hWnd, lpszText, lpszCaption, nType ) );
}

AFX_INLINE void CWnd::MoveWindow( int x, int y, int nWidth, int nHeight, BOOL bRepaint )
/**************************************************************************************/
{
    ::MoveWindow( m_hWnd, x, y, nWidth, nHeight, bRepaint );
}

AFX_INLINE void CWnd::MoveWindow( LPCRECT lpRect, BOOL bRepaint )
/***************************************************************/
{
    ::MoveWindow( m_hWnd, lpRect->left, lpRect->top, lpRect->right - lpRect->left,
                  lpRect->bottom - lpRect->top, bRepaint );
}

AFX_INLINE BOOL CWnd::OpenClipboard()
/***********************************/
{
    return( ::OpenClipboard( m_hWnd ) );
}

AFX_INLINE BOOL CWnd::PostMessage( UINT message, WPARAM wParam, LPARAM lParam )
/*****************************************************************************/
{
    return( ::PostMessage( m_hWnd, message, wParam, lParam ) );
}

AFX_INLINE void CWnd::Print( CDC *pDC, DWORD dwFlags ) const
/**********************************************************/
{
    ::SendMessage( m_hWnd, WM_PRINT, (WPARAM)pDC->GetSafeHdc(), (LPARAM)dwFlags );
}

AFX_INLINE void CWnd::PrintClient( CDC *pDC, DWORD dwFlags ) const
/****************************************************************/
{
    ::SendMessage( m_hWnd, WM_PRINTCLIENT, (WPARAM)pDC->GetSafeHdc(), (LPARAM)dwFlags );
}

AFX_INLINE BOOL CWnd::RedrawWindow( LPCRECT lpRectUpdate, CRgn *prgnUpdate, UINT flags )
/**************************************************************************************/
{
    return( ::RedrawWindow( m_hWnd, lpRectUpdate, (HRGN)prgnUpdate->GetSafeHandle(),
                            flags ) );
}

AFX_INLINE int CWnd::ReleaseDC( CDC *pDC )
/****************************************/
{
    return( ::ReleaseDC( m_hWnd, pDC->GetSafeHdc() ) );
}

AFX_INLINE void CWnd::ScreenToClient( LPPOINT lpPoint ) const
/***********************************************************/
{
    ::ScreenToClient( m_hWnd, lpPoint );
}

AFX_INLINE void CWnd::ScreenToClient( LPRECT lpRect ) const
/*********************************************************/
{
    ::ScreenToClient( m_hWnd, (LPPOINT)lpRect );
    ::ScreenToClient( m_hWnd, (LPPOINT)lpRect + 1 );
}

AFX_INLINE void CWnd::ScrollWindow( int xAmount, int yAmount, LPCRECT lpRect,
                                    LPCRECT lpClipRect )
/******************************************************/
{
    ::ScrollWindow( m_hWnd, xAmount, yAmount, lpRect, lpClipRect );
}

AFX_INLINE int CWnd::ScrollWindowEx( int dx, int dy, LPCRECT lpRectScroll,
                                     LPCRECT lpRectClip, CRgn *prgnUpdate,
                                     LPRECT lpRectUpdate, UINT flags )
/********************************************************************/
{
    return( ::ScrollWindowEx( m_hWnd, dx, dy, lpRectScroll, lpRectClip,
                              (HRGN)prgnUpdate->GetSafeHandle(), lpRectUpdate,
                              flags ) );
}

AFX_INLINE LRESULT CWnd::SendDlgItemMessage( int nID, UINT message, WPARAM wParam,
                                             LPARAM lParam )
/**********************************************************/
{
    return( ::SendDlgItemMessage( m_hWnd, nID, message, wParam, lParam ) );
}

AFX_INLINE LRESULT CWnd::SendMessage( UINT message, WPARAM wParam, LPARAM lParam )
/********************************************************************************/
{
    return( ::SendMessage( m_hWnd, message, wParam, lParam ) );
}

AFX_INLINE BOOL CWnd::SendNotifyMessage( UINT message, WPARAM wParam, LPARAM lParam )
/***********************************************************************************/
{
    return( ::SendNotifyMessage( m_hWnd, message, wParam, lParam ) );
}

AFX_INLINE CWnd *CWnd::SetActiveWindow()
/**************************************/
{
    return( CWnd::FromHandle( ::SetActiveWindow( m_hWnd ) ) );
}

AFX_INLINE CWnd *CWnd::SetCapture()
/*********************************/
{
    return( CWnd::FromHandle( ::SetCapture( m_hWnd ) ) );
}

AFX_INLINE HWND CWnd::SetClipboardViewer()
/****************************************/
{
    return( ::SetClipboardViewer( m_hWnd ) );
}

AFX_INLINE int CWnd::SetDlgCtrlID( int nID )
/******************************************/
{
    return( (int)::SetWindowLong( m_hWnd, GWL_ID, nID ) );
}

AFX_INLINE void CWnd::SetDlgItemInt( int nID, UINT nValue, BOOL bSigned )
/***********************************************************************/
{
    ::SetDlgItemInt( m_hWnd, nID, nValue, bSigned );
}

AFX_INLINE void CWnd::SetDlgItemText( int nID, LPCTSTR lpszString )
/*****************************************************************/
{
    ::SetDlgItemText( m_hWnd, nID, lpszString );
}

AFX_INLINE BOOL CWnd::SetForegroundWindow()
/*****************************************/
{
    return( ::SetForegroundWindow( m_hWnd ) );
}

AFX_INLINE CWnd *CWnd::SetFocus()
/*******************************/
{
    return( CWnd::FromHandle( ::SetFocus( m_hWnd ) ) );
}

AFX_INLINE void CWnd::SetFont( CFont *pFont, BOOL bRedraw )
/*********************************************************/
{
    ::SendMessage( m_hWnd, WM_SETFONT, (WPARAM)pFont->GetSafeHandle(), (LPARAM)bRedraw );
}

AFX_INLINE HICON CWnd::SetIcon( HICON hIcon, BOOL bBigIcon )
/**********************************************************/
{
    return( (HICON)::SendMessage( m_hWnd, WM_SETICON, bBigIcon ? ICON_BIG : ICON_SMALL,
                                  (LPARAM)hIcon ) );
}

AFX_INLINE BOOL CWnd::SetMenu( CMenu *pMenu )
/*******************************************/
{
    return( ::SetMenu( m_hWnd, pMenu->GetSafeHmenu() ) );
}

AFX_INLINE void CWnd::SetOwner( CWnd *pOwnerWnd )
/***********************************************/
{
    m_hWndOwner = pOwnerWnd->GetSafeHwnd();
}

AFX_INLINE CWnd *CWnd::SetParent( CWnd *pWndNewParent )
/*****************************************************/
{
    return( CWnd::FromHandle( ::SetParent( m_hWnd, pWndNewParent->GetSafeHwnd() ) ) );
}

AFX_INLINE void CWnd::SetRedraw( BOOL bRedraw )
/*********************************************/
{
    ::SendMessage( m_hWnd, WM_SETREDRAW, (WPARAM)bRedraw, 0L );
}

AFX_INLINE UINT_PTR CWnd::SetTimer( UINT_PTR nIDEvent, UINT nElapse,
                                    TIMERPROC lpfnTimer )
/*******************************************************/
{
    return( ::SetTimer( m_hWnd, nIDEvent, nElapse, lpfnTimer ) );
}

AFX_INLINE BOOL CWnd::SetWindowContextHelpId( DWORD dwContextHelpId )
/*******************************************************************/
{
    return( ::SetWindowContextHelpId( m_hWnd, dwContextHelpId ) );
}

AFX_INLINE BOOL CWnd::SetWindowPlacement( const WINDOWPLACEMENT *lpwndpl )
/************************************************************************/
{
    return( ::SetWindowPlacement( m_hWnd, lpwndpl ) );
}

AFX_INLINE BOOL CWnd::SetWindowPos( const CWnd *pWndInsertAfter, int x, int y, int cx,
                                    int cy, UINT nFlags )
/*******************************************************/
{
    return( ::SetWindowPos( m_hWnd, pWndInsertAfter->GetSafeHwnd(), x, y, cx, cy,
                            nFlags ) );
}

AFX_INLINE int CWnd::SetWindowRgn( HRGN hRgn, BOOL bRedraw )
/**********************************************************/
{
    return( ::SetWindowRgn( m_hWnd, hRgn, bRedraw ) );
}

AFX_INLINE void CWnd::SetWindowText( LPCTSTR lpszString )
/*******************************************************/
{
    ::SetWindowText( m_hWnd, lpszString );
}

AFX_INLINE void CWnd::ShowCaret()
/*******************************/
{
    ::ShowCaret( m_hWnd );
}

AFX_INLINE void CWnd::ShowOwnedPopups( BOOL bShow )
/*************************************************/
{
    ::ShowOwnedPopups( m_hWnd, bShow );
}

AFX_INLINE BOOL CWnd::ShowWindow( int nCmdShow )
/**********************************************/
{
    return( ::ShowWindow( m_hWnd, nCmdShow ) );
}

AFX_INLINE BOOL CWnd::SubclassDlgItem( UINT nID, CWnd *pParent )
/**************************************************************/
{
    return( SubclassWindow( ::GetDlgItem( pParent->GetSafeHwnd(), nID ) ) );
}

AFX_INLINE void CWnd::UnlockWindowUpdate()
/****************************************/
{
    ::LockWindowUpdate( NULL );
}

AFX_INLINE BOOL CWnd::UpdateWindow()
/**********************************/
{
    return( ::UpdateWindow( m_hWnd ) );
}

AFX_INLINE void CWnd::ValidateRect( LPCRECT lpRect )
/**************************************************/
{
    ::ValidateRect( m_hWnd, lpRect );
}

AFX_INLINE void CWnd::ValidateRgn( CRgn *pRgn )
/*********************************************/
{
    ::ValidateRgn( m_hWnd, (HRGN)pRgn->GetSafeHandle() );
}

AFX_INLINE BOOL CWnd::operator!=( const CWnd &wnd ) const
/*******************************************************/
{
    return( m_hWnd != wnd.m_hWnd );
}

AFX_INLINE BOOL CWnd::operator==( const CWnd &wnd ) const
/*******************************************************/
{
    return( m_hWnd == wnd.m_hWnd );
}

AFX_INLINE CWnd::operator HWND() const
/************************************/
{
    return( this == NULL ? NULL : m_hWnd );
}

AFX_INLINE CWnd * PASCAL CWnd::FindWindow( LPCTSTR lpszClassName,
                                           LPCTSTR lpszWindowName )
/*****************************************************************/
{
    return( CWnd::FromHandle( ::FindWindow( lpszClassName, lpszWindowName ) ) );
}

AFX_INLINE CWnd * PASCAL CWnd::FindWindowEx( HWND hwndParent, HWND hwndChildAfter,
                                             LPCTSTR lpszClass, LPCTSTR lpszWindow )
/**********************************************************************************/
{
    return( CWnd::FromHandle( ::FindWindowEx( hwndParent, hwndChildAfter, lpszClass,
                                              lpszWindow ) ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetActiveWindow()
/**********************************************/
{
    return( CWnd::FromHandle( ::GetActiveWindow() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetCapture()
/*****************************************/
{
    return( CWnd::FromHandle( ::GetCapture() ) );
}

AFX_INLINE CPoint PASCAL CWnd::GetCaretPos()
/******************************************/
{
    CPoint point;
    ::GetCaretPos( &point );
    return( point );
}

AFX_INLINE CWnd * PASCAL CWnd::GetClipboardOwner()
/************************************************/
{
    return( CWnd::FromHandle( ::GetClipboardOwner() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetClipboardViewer()
/*************************************************/
{
    return( CWnd::FromHandle( ::GetClipboardViewer() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetDesktopWindow()
/***********************************************/
{
    return( CWnd::FromHandle( ::GetDesktopWindow() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetFocus()
/***************************************/
{
    return( CWnd::FromHandle( ::GetFocus() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetForegroundWindow()
/**************************************************/
{
    return( CWnd::FromHandle( ::GetForegroundWindow() ) );
}

AFX_INLINE CWnd * PASCAL CWnd::GetOpenClipboardWindow()
/*****************************************************/
{
    return( CWnd::FromHandle( ::GetOpenClipboardWindow() ) );
}

AFX_INLINE void PASCAL CWnd::SetCaretPos( POINT point )
/*****************************************************/
{
    ::SetCaretPos( point.x, point.y );
}

AFX_INLINE CWnd * PASCAL CWnd::WindowFromPoint( POINT point )
/***********************************************************/
{
    return( CWnd::FromHandle( ::WindowFromPoint( point ) ) );
}

AFX_INLINE void CWnd::OnActivate( UINT, CWnd *, BOOL )
/****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnActivateApp( BOOL, DWORD )
/************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnAppCommand( CWnd *, UINT, UINT, UINT )
/************************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnAskCbFormatName( UINT, LPTSTR )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnCancelMode()
/**********************************/
{
    Default();
}

AFX_INLINE void CWnd::OnCaptureChanged( CWnd * )
/**********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnChangeCbChain( HWND, HWND )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnChar( UINT, UINT, UINT )
/**********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnChildActivate()
/*************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnClipboardUpdate()
/***************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnClose()
/*****************************/
{
    Default();
}

AFX_INLINE void CWnd::OnCompacting( UINT )
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnCompositionChanged()
/******************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnContextMenu( CWnd *, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE BOOL CWnd::OnCopyData( CWnd *, COPYDATASTRUCT * )
/**********************************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE int CWnd::OnCreate( LPCREATESTRUCT )
/*********************************************/
{
    return( (int)Default() );
}

AFX_INLINE void CWnd::OnDeadChar( UINT, UINT, UINT )
/**************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDestroy()
/*******************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDestroyClipboard()
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDeviceChange( UINT, DWORD_PTR )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDevModeChange( LPTSTR )
/*********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDrawClipboard()
/*************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnDropFiles( HDROP )
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnEnable( BOOL )
/************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnEndSession( BOOL )
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnEnterIdle( UINT, CWnd * )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnEnterMenuLoop( BOOL )
/*******************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnEnterSizeMove()
/*************************************/
{
    Default();
}

AFX_INLINE BOOL CWnd::OnEraseBkgnd( CDC * )
/*****************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE void CWnd::OnExitMenuLoop( BOOL )
/******************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnExitSizeMove()
/************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnFontChange()
/**********************************/
{
    Default();
}

AFX_INLINE UINT CWnd::OnGetDlgCode()
/**********************************/
{
    return( (UINT)Default() );
}

AFX_INLINE void CWnd::OnGetMinMaxInfo( MINMAXINFO * )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnHotKey( UINT, UINT, UINT )
/************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnHScrollClipboard( CWnd *, UINT, UINT )
/************************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnIconEraseBkgnd( CDC * )
/*********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnInitMenu( CMenu * )
/*****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnInitMenuPopup( CMenu *, UINT, BOOL )
/**********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnInputLangChange( BYTE, UINT )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnInputLangChangeRequest( UINT, HKL )
/*********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnKeyDown( UINT, UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnKeyUp( UINT, UINT, UINT )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnKillFocus( CWnd * )
/*****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnLButtonDblClk( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnLButtonDown( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnLButtonUp( UINT, CPoint )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMButtonDblClk( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMButtonDown( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMButtonUp( UINT, CPoint )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMDIActivate( BOOL, CWnd *, CWnd * )
/*********************************************************/
{
    Default();
}

AFX_INLINE LRESULT CWnd::OnMenuChar( UINT, UINT, CMenu * )
/********************************************************/
{
    return( Default() );
}

AFX_INLINE void CWnd::OnMenuSelect( UINT, UINT, HMENU )
/*****************************************************/
{
    Default();
}

AFX_INLINE int CWnd::OnMouseActivate( CWnd *, UINT, UINT )
/********************************************************/
{
    return( (int)Default() );
}

AFX_INLINE void CWnd::OnMouseMove( UINT, CPoint )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMove( int, int )
/**************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMoving( UINT, LPRECT )
/********************************************/
{
    Default();
}

AFX_INLINE BOOL CWnd::OnNcActivate( BOOL )
/****************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE void CWnd::OnNcCalcSize( BOOL, NCCALCSIZE_PARAMS * )
/*************************************************************/
{
    Default();
}

AFX_INLINE BOOL CWnd::OnNcCreate( LPCREATESTRUCT )
/************************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE LRESULT CWnd::OnNcHitTest( CPoint )
/********************************************/
{
    return( Default() );
}

AFX_INLINE void CWnd::OnNcLButtonDblClk( UINT, CPoint )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcLButtonDown( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcLButtonUp( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMButtonDblClk( UINT, CPoint )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMButtonDown( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMButtonUp( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMouseHover( UINT, CPoint )
/**************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMouseLeave()
/************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcMouseMove( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcPaint()
/*******************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcRButtonDblClk( UINT, CPoint )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcRButtonDown( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcRButtonUp( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNextMenu( UINT, LPMDINEXTMENU )
/*****************************************************/
{
    Default();
}

AFX_INLINE UINT CWnd::OnNotifyFormat( CWnd *, UINT )
/**************************************************/
{
    return( (UINT)Default() );
}

AFX_INLINE void CWnd::OnPaint()
/*****************************/
{
    Default();
}

AFX_INLINE void CWnd::OnPaintClipboard( CWnd *, HGLOBAL )
/*******************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnPaletteChanged( CWnd * )
/**********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnPaletteIsChanging( CWnd * )
/*************************************************/
{
    Default();
}

AFX_INLINE UINT CWnd::OnPowerBroadcast( UINT, UINT )
/**************************************************/
{
    return( (UINT)Default() );
}

AFX_INLINE HCURSOR CWnd::OnQueryDragIcon()
/****************************************/
{
    return( (HCURSOR)Default() );
}

AFX_INLINE BOOL CWnd::OnQueryEndSession()
/***************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE BOOL CWnd::OnQueryNewPalette()
/***************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE BOOL CWnd::OnQueryOpen()
/*********************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE void CWnd::OnRButtonDblClk( UINT, CPoint )
/***************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnRButtonDown( UINT, CPoint )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnRButtonUp( UINT, CPoint )
/***********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnRenderAllFormats()
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnRenderFormat( UINT )
/******************************************/
{
    Default();
}

AFX_INLINE BOOL CWnd::OnSetCursor( CWnd *, UINT, UINT )
/*****************************************************/
{
    return( (BOOL)Default() );
}

AFX_INLINE void CWnd::OnSetFocus( CWnd * )
/****************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSettingChange( UINT, LPCTSTR )
/****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnShowWindow( BOOL, UINT )
/**********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSize( UINT, int, int )
/********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSizeClipboard( CWnd *, HGLOBAL )
/******************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSizing( UINT, LPRECT )
/********************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSpoolerStatus( UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnStyleChanged( int, LPSTYLESTRUCT )
/********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnStyleChanging( int, LPSTYLESTRUCT )
/*********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysChar( UINT, UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysColorChange()
/**************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysCommand( UINT, LPARAM )
/************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysDeadChar( UINT, UINT, UINT )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysKeyDown( UINT, UINT, UINT )
/****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSysKeyUp( UINT, UINT, UINT )
/**************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnTCard( UINT, DWORD )
/******************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnTimeChange()
/**********************************/
{
    Default();
}

AFX_INLINE void CWnd::OnTimer( UINT_PTR )
/***************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnUserChanged()
/***********************************/
{
    Default();
}

AFX_INLINE void CWnd::OnVScrollClipboard( CWnd *, UINT, UINT )
/************************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnWindowPosChanged( WINDOWPOS * )
/*****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnWindowPosChanging( WINDOWPOS * )
/******************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnWinIniChange( LPCTSTR )
/*********************************************/
{
    Default();
}

#if (WINVER >= 0x0500)

AFX_INLINE UINT CWnd::OnMenuDrag( UINT, CMenu * )
/***********************************************/
{
    return( (UINT)Default() );
}

AFX_INLINE UINT CWnd::OnMenuGetObject( MENUGETOBJECTINFO * )
/**********************************************************/
{
    return( (UINT)Default() );
}

AFX_INLINE void CWnd::OnMenuRButtonUp( UINT, CMenu * )
/****************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnUnInitMenuPopup( CMenu *, UINT )
/******************************************************/
{
    Default();
}

#endif // (WINVER >= 0x0500)

#if (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)

AFX_INLINE BOOL CWnd::OnMouseWheel( UINT, short, CPoint )
/*******************************************************/
{
    return( (BOOL)Default() );
}

#endif // (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400)

#if (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400) || (_WIN32_IE >= 0x0300)

AFX_INLINE void CWnd::OnMouseHover( UINT, CPoint )
/************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMouseLeave()
/**********************************/
{
    Default();
}

#endif // (WINVER >= 0x0500) || (_WIN32_WINNT >= 0x0400) || (_WIN32_IE >= 0x0300)

#if (_WIN32_WINNT >= 0x0500)

AFX_INLINE void CWnd::OnChangeUIState( UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcXButtonDblClk( UINT, UINT, CPoint )
/***********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcXButtonDown( UINT, UINT, CPoint )
/*********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcXButtonUp( UINT, UINT, CPoint )
/*******************************************************/
{
    Default();
}

AFX_INLINE UINT CWnd::OnQueryUIState()
/************************************/
{
    return( (UINT)Default() );
}

AFX_INLINE void CWnd::OnUpdateUIState( UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnXButtonDblClk( UINT, UINT, CPoint )
/*********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnXButtonDown( UINT, UINT, CPoint )
/*******************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnXButtonUp( UINT, UINT, CPoint )
/*****************************************************/
{
    Default();
}

#endif // (_WIN32_WINNT >= 0x0500)

#if (_WIN32_WINNT >= 0x0501)

AFX_INLINE void CWnd::OnRawInput( UINT, HRAWINPUT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnSessionChange( UINT, UINT )
/*************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnUniChar( UINT, UINT, UINT )
/*************************************************/
{
    Default();
}

#endif // (_WIN32_WINNT >= 0x0501)

#if (_WIN32_WINNT >= 0x0600)

AFX_INLINE void CWnd::OnColorizationColorChanged( DWORD, BOOL )
/*************************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnInputDeviceChange( unsigned short )
/*********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnMouseHWheel( UINT, short, CPoint )
/********************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnNcRenderingChanged( BOOL )
/************************************************/
{
    Default();
}

AFX_INLINE void CWnd::OnWindowMaximizedChanged( BOOL )
/****************************************************/
{
    Default();
}

#endif // (_WIN32_WINNT >= 0x0600)

AFX_INLINE CView *CFrameWnd::GetActiveView() const
/************************************************/
{
    return( m_pViewActive );
}

AFX_INLINE CString CFrameWnd::GetTitle() const
/********************************************/
{
    return( m_strTitle );
}

AFX_INLINE void CMDIFrameWnd::MDIActivate( CWnd *pWndActivate )
/*************************************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDIACTIVATE,
                   (WPARAM)pWndActivate->GetSafeHwnd(), 0L );
}

AFX_INLINE void CMDIFrameWnd::MDICascade()
/****************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDICASCADE, 0, 0L );
}

AFX_INLINE void CMDIFrameWnd::MDICascade( int nType )
/***************************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDICASCADE, nType, 0L );
}

AFX_INLINE void CMDIChildWnd::MDIDestroy()
/****************************************/
{
    CMDIFrameWnd *pFrame = GetMDIFrame();
    ASSERT( pFrame != NULL );
    ASSERT( pFrame->m_hWndMDIClient != NULL ) ;
    ::SendMessage( pFrame->m_hWndMDIClient, WM_MDIDESTROY, (WPARAM)m_hWnd, 0L );
}

AFX_INLINE CMDIChildWnd *CMDIFrameWnd::MDIGetActive( BOOL *pbMaximized ) const
/****************************************************************************/
{
    return( (CMDIChildWnd *)CWnd::FromHandle( (HWND)::SendMessage( m_hWndMDIClient,
        WM_MDIGETACTIVE, 0, (LPARAM)pbMaximized ) ) );
}

AFX_INLINE void CMDIFrameWnd::MDIIconArrange()
/********************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDIICONARRANGE, 0, 0L );
}

AFX_INLINE void CMDIFrameWnd::MDIMaximize( CWnd *pWnd )
/*****************************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDIMAXIMIZE, (WPARAM)pWnd->GetSafeHwnd(), 0L );
}

AFX_INLINE void CMDIFrameWnd::MDINext()
/*************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDINEXT, 0, 0L );
}

AFX_INLINE void CMDIFrameWnd::MDIPrev()
/*************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDINEXT, 0, 1L );
}

AFX_INLINE void CMDIFrameWnd::MDIRestore( CWnd *pWnd )
/****************************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDIRESTORE, (WPARAM)pWnd->GetSafeHwnd(), 0L );
}

AFX_INLINE CMenu *CMDIFrameWnd::MDISetMenu( CMenu *pFrameMenu, CMenu *pWindowMenu )
/*********************************************************************************/
{
    return( CMenu::FromHandle( (HMENU)::SendMessage( m_hWndMDIClient, WM_MDISETMENU,
        (WPARAM)pFrameMenu->GetSafeHmenu(), (LPARAM)pWindowMenu->GetSafeHmenu() ) ) );
}

AFX_INLINE void CMDIFrameWnd::MDITile()
/*************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDITILE, 0, 0L );
}

AFX_INLINE void CMDIFrameWnd::MDITile( int nType )
/************************************************/
{
    ::SendMessage( m_hWndMDIClient, WM_MDITILE, nType, 0L );
}

AFX_INLINE void CDialog::EndDialog( int nResult )
/***********************************************/
{
    ::EndDialog( m_hWnd, nResult );
}

AFX_INLINE DWORD CDialog::GetDefID() const
/****************************************/
{
    return( (DWORD)::SendMessage( m_hWnd, DM_GETDEFID, 0, 0L ) );
}

AFX_INLINE void CDialog::MapDialogRect( LPRECT lpRect ) const
/***********************************************************/
{
    ::MapDialogRect( m_hWnd, lpRect );
}

AFX_INLINE void CDialog::SetDefID( UINT nID )
/*******************************************/
{
    ::SendMessage( m_hWnd, DM_SETDEFID, nID, 0L );
}

AFX_INLINE HBITMAP CStatic::GetBitmap() const
/*******************************************/
{
    return( (HBITMAP)::SendMessage( m_hWnd, STM_GETIMAGE, IMAGE_BITMAP, 0L ) );
}

AFX_INLINE HCURSOR CStatic::GetCursor() const
/*******************************************/
{
    return( (HCURSOR)::SendMessage( m_hWnd, STM_GETIMAGE, IMAGE_CURSOR, 0L ) );
}

AFX_INLINE HENHMETAFILE CStatic::GetEnhMetaFile() const
/*****************************************************/
{
    return( (HENHMETAFILE)::SendMessage( m_hWnd, STM_GETIMAGE, IMAGE_ENHMETAFILE, 0L ) );
}

AFX_INLINE HICON CStatic::GetIcon() const
/***************************************/
{
    return( (HICON)::SendMessage( m_hWnd, STM_GETICON, 0, 0L ) );
}

AFX_INLINE HBITMAP CStatic::SetBitmap( HBITMAP hBitmap )
/******************************************************/
{
    return( (HBITMAP)::SendMessage( m_hWnd, STM_SETIMAGE, IMAGE_BITMAP,
                                    (LPARAM)hBitmap ) );
}

AFX_INLINE HCURSOR CStatic::SetCursor( HCURSOR hCursor )
/******************************************************/
{
    return( (HCURSOR)::SendMessage( m_hWnd, STM_SETIMAGE, IMAGE_CURSOR,
                                    (LPARAM)hCursor ) );
}

AFX_INLINE HENHMETAFILE CStatic::SetEnhMetaFile( HENHMETAFILE hMetaFile )
/***********************************************************************/
{
    return( (HENHMETAFILE)::SendMessage( m_hWnd, STM_SETIMAGE, IMAGE_ENHMETAFILE,
                                         (LPARAM)hMetaFile ) );
}

AFX_INLINE HICON CStatic::SetIcon( HICON hIcon )
/**********************************************/
{
    return( (HICON)::SendMessage( m_hWnd, STM_SETICON, (WPARAM)hIcon, 0L ) );
}

AFX_INLINE HBITMAP CButton::GetBitmap() const
/*******************************************/
{
    return( (HBITMAP)::SendMessage( m_hWnd, BM_GETIMAGE, IMAGE_BITMAP, 0L ) );
}

AFX_INLINE UINT CButton::GetButtonStyle() const
/*********************************************/
{
    return( (UINT)(GetStyle() & 0xFFL) );
}

AFX_INLINE int CButton::GetCheck() const
/**************************************/
{
    return( (int)::SendMessage( m_hWnd, BM_GETCHECK, 0, 0L ) );
}

AFX_INLINE HCURSOR CButton::GetCursor() const
/*******************************************/
{
    return( (HCURSOR)::SendMessage( m_hWnd, BM_GETIMAGE, IMAGE_CURSOR, 0L ) );
}

AFX_INLINE HICON CButton::GetIcon() const
/***************************************/
{
    return( (HICON)::SendMessage( m_hWnd, BM_GETIMAGE, IMAGE_ICON, 0L ) );
}

AFX_INLINE UINT CButton::GetState() const
/***************************************/
{
    return( (UINT)::SendMessage( m_hWnd, BM_GETSTATE, 0, 0L ) );
}

AFX_INLINE HBITMAP CButton::SetBitmap( HBITMAP hBitmap )
/******************************************************/
{
    return( (HBITMAP)::SendMessage( m_hWnd, BM_SETIMAGE, IMAGE_BITMAP,
                                    (LPARAM)hBitmap ) );
}

AFX_INLINE void CButton::SetButtonStyle( UINT nStyle, BOOL bRedraw )
/******************************************************************/
{
    ::SendMessage( m_hWnd, BM_SETSTYLE, nStyle, bRedraw );
}

AFX_INLINE void CButton::SetCheck( int nCheck )
/*********************************************/
{
    ::SendMessage( m_hWnd, BM_SETCHECK, nCheck, 0L );
}

AFX_INLINE HCURSOR CButton::SetCursor( HCURSOR hCursor )
/******************************************************/
{
    return( (HCURSOR)::SendMessage( m_hWnd, BM_SETIMAGE, IMAGE_CURSOR,
                                    (LPARAM)hCursor ) );
}

AFX_INLINE HICON CButton::SetIcon( HICON hIcon )
/**********************************************/
{
    return( (HICON)::SendMessage( m_hWnd, BM_SETIMAGE, IMAGE_ICON, (LPARAM)hIcon ) );
}

AFX_INLINE void CButton::SetState( BOOL bHighlight )
/**************************************************/
{
    ::SendMessage( m_hWnd, BM_SETSTATE, bHighlight, 0L );
}

#if (_WIN32_WINNT >= 0x0501)

AFX_INLINE BOOL CButton::GetIdealSize( SIZE *psize )
/**************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, BCM_GETIDEALSIZE, 0, (LPARAM)psize ) );
}

AFX_INLINE BOOL CButton::GetImageList( PBUTTON_IMAGELIST pbuttonImagelist )
/*************************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, BCM_GETIMAGELIST, 0,
                                 (LPARAM)pbuttonImagelist ) );
}

AFX_INLINE BOOL CButton::GetTextMargin( RECT *pmargin )
/*****************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, BCM_GETTEXTMARGIN, 0, (LPARAM)pmargin ) );
}

AFX_INLINE BOOL CButton::SetImageList( PBUTTON_IMAGELIST pbuttonImagelist )
/*************************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, BCM_SETIMAGELIST, 0,
                                 (LPARAM)pbuttonImagelist ) );
}

AFX_INLINE BOOL CButton::SetTextMargin( RECT *pmargin )
/*****************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, BCM_SETTEXTMARGIN, 0, (LPARAM)pmargin ) );
}

#endif // (_WIN32_WINNT >= 0x0501)

AFX_INLINE BOOL CEdit::CanUndo() const
/************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_CANUNDO, 0, 0L ) );
}

AFX_INLINE int CEdit::CharFromPos( CPoint pt ) const
/**************************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_CHARFROMPOS, 0, MAKELPARAM( pt.x, pt.y ) ) );
}

AFX_INLINE void CEdit::Clear()
/****************************/
{
    ::SendMessage( m_hWnd, WM_CLEAR, 0, 0L );
}

AFX_INLINE void CEdit::Copy()
/***************************/
{
    ::SendMessage( m_hWnd, WM_COPY, 0, 0L );
}

AFX_INLINE void CEdit::Cut()
/**************************/
{
    ::SendMessage( m_hWnd, WM_CUT, 0, 0L );
}

AFX_INLINE void CEdit::EmptyUndoBuffer()
/**************************************/
{
    ::SendMessage( m_hWnd, EM_EMPTYUNDOBUFFER, 0, 0L );
}

AFX_INLINE BOOL CEdit::FmtLines( BOOL bAddEOL )
/*********************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_FMTLINES, bAddEOL, 0L ) );
}

AFX_INLINE int CEdit::GetFirstVisibleLine() const
/***********************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_GETFIRSTVISIBLELINE, 0, 0L ) );
}

AFX_INLINE HLOCAL CEdit::GetHandle() const
/****************************************/
{
    return( (HLOCAL)::SendMessage( m_hWnd, EM_GETHANDLE, 0, 0L ) );
}

AFX_INLINE UINT CEdit::GetLimitText() const
/*****************************************/
{
    return( (UINT)::SendMessage( m_hWnd, EM_GETLIMITTEXT, 0, 0L ) );
}

AFX_INLINE int CEdit::GetLine( int nIndex, LPTSTR lpszBuffer ) const
/******************************************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_GETLINE, nIndex, (LPARAM)lpszBuffer ) );
}

AFX_INLINE int CEdit::GetLine( int nIndex, LPTSTR lpszBuffer, int nMaxLength ) const
/**********************************************************************************/
{
    ASSERT( lpszBuffer != NULL );
    *(int *)lpszBuffer = (WORD)nMaxLength;
    return( (int)::SendMessage( m_hWnd, EM_GETLINE, nIndex, (LPARAM)lpszBuffer ) );
}

AFX_INLINE int CEdit::GetLineCount() const
/****************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_GETLINECOUNT, 0, 0L ) );
}

AFX_INLINE DWORD CEdit::GetMargins() const
/****************************************/
{
    return( (DWORD)::SendMessage( m_hWnd, EM_GETMARGINS, 0, 0L ) );
}

AFX_INLINE BOOL CEdit::GetModify() const
/**************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_GETMODIFY, 0, 0L ) );
}

AFX_INLINE TCHAR CEdit::GetPasswordChar() const
/*********************************************/
{
    return( (TCHAR)::SendMessage( m_hWnd, EM_GETPASSWORDCHAR, 0, 0L ) );
}

AFX_INLINE void CEdit::GetRect( LPRECT lpRect ) const
/***************************************************/
{
    ::SendMessage( m_hWnd, EM_GETRECT, 0, (LPARAM)lpRect );
}

AFX_INLINE DWORD CEdit::GetSel() const
/************************************/
{
    return( (DWORD)::SendMessage( m_hWnd, EM_GETSEL, 0, 0L ) );
}

AFX_INLINE void CEdit::GetSel( int &nStartChar, int &nEndChar ) const
/*******************************************************************/
{
    ::SendMessage( m_hWnd, EM_GETSEL, (WPARAM)&nStartChar, (LPARAM)&nEndChar );
}

AFX_INLINE void CEdit::LimitText( int nChars )
/********************************************/
{
    ::SendMessage( m_hWnd, EM_LIMITTEXT, nChars, 0L );
}

AFX_INLINE int CEdit::LineFromChar( int nIndex ) const
/****************************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_LINEFROMCHAR, nIndex, 0L ) );
}

AFX_INLINE int CEdit::LineIndex( int nLine ) const
/************************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_LINEINDEX, nLine, 0L ) );
}

AFX_INLINE int CEdit::LineLength( int nLine ) const
/*************************************************/
{
    return( (int)::SendMessage( m_hWnd, EM_LINELENGTH, nLine, 0L ) );
}

AFX_INLINE void CEdit::LineScroll( int nLines, int nChars )
/*********************************************************/
{
    ::SendMessage( m_hWnd, EM_LINESCROLL, nChars, nLines );
}

AFX_INLINE void CEdit::Paste()
/****************************/
{
    ::SendMessage( m_hWnd, WM_PASTE, 0, 0L );
}

AFX_INLINE CPoint CEdit::PosFromChar( UINT nChar ) const
/******************************************************/
{
    return( CPoint( (LPARAM)::SendMessage( m_hWnd, EM_POSFROMCHAR, nChar, 0L ) ) );
}

AFX_INLINE void CEdit::ReplaceSel( LPCTSTR lpszNewText, BOOL bCanUndo )
/*********************************************************************/
{
    ::SendMessage( m_hWnd, EM_REPLACESEL, bCanUndo, (LPARAM)lpszNewText );
}

AFX_INLINE void CEdit::SetHandle( HLOCAL hBuffer )
/************************************************/
{
    ::SendMessage( m_hWnd, EM_SETHANDLE, (WPARAM)hBuffer, 0L );
}

AFX_INLINE void CEdit::SetLimitText( UINT nMax )
/**********************************************/
{
    ::SendMessage( m_hWnd, EM_SETLIMITTEXT, nMax, 0L );
}

AFX_INLINE void CEdit::SetMargins( UINT nLeft, UINT nRight )
/**********************************************************/
{
    ::SendMessage( m_hWnd, EM_SETMARGINS, EC_LEFTMARGIN | EC_RIGHTMARGIN,
                   MAKELPARAM( nLeft, nRight ) );
}

AFX_INLINE void CEdit::SetModify( BOOL bModified )
/************************************************/
{
    ::SendMessage( m_hWnd, EM_SETMODIFY, bModified, 0L );
}

AFX_INLINE void CEdit::SetPasswordChar( TCHAR ch )
/************************************************/
{
    ::SendMessage( m_hWnd, EM_SETPASSWORDCHAR, (WPARAM)ch, 0L );
}

AFX_INLINE BOOL CEdit::SetReadOnly( BOOL bReadOnly )
/**************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_SETREADONLY, bReadOnly, 0L ) );
}

AFX_INLINE void CEdit::SetRect( LPCRECT lpRect )
/**********************************************/
{
    ::SendMessage( m_hWnd, EM_SETRECT, 0, (LPARAM)lpRect );
}

AFX_INLINE void CEdit::SetRectNP( LPCRECT lpRect )
/************************************************/
{
    ::SendMessage( m_hWnd, EM_SETRECTNP, 0, (LPARAM)lpRect );
}

AFX_INLINE void CEdit::SetSel( DWORD dwSelection, BOOL bNoScroll )
/****************************************************************/
{
    ::SendMessage( m_hWnd, EM_SETSEL, LOWORD( dwSelection ), HIWORD( dwSelection ) );
    if( !bNoScroll ) {
        ::SendMessage( m_hWnd, EM_SCROLLCARET, 0, 0L );
    }
}

AFX_INLINE void CEdit::SetSel( int nStartChar, int nEndChar, BOOL bNoScroll )
/***************************************************************************/
{
    ::SendMessage( m_hWnd, EM_SETSEL, nStartChar, nEndChar );
    if( !bNoScroll ) {
        ::SendMessage( m_hWnd, EM_SCROLLCARET, 0, 0L );
    }
}

AFX_INLINE void CEdit::SetTabStops()
/**********************************/
{
    ::SendMessage( m_hWnd, EM_SETTABSTOPS, 0, 0L );
}

AFX_INLINE BOOL CEdit::SetTabStops( const int &cxEachStop )
/*********************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_SETTABSTOPS, 1, (LPARAM)&cxEachStop ) );
}

AFX_INLINE BOOL CEdit::SetTabStops( int nTabStops, LPINT rgTabStops )
/*******************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_SETTABSTOPS, nTabStops,
                                 (LPARAM)rgTabStops ) );
}

AFX_INLINE BOOL CEdit::Undo()
/***************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_UNDO, 0, 0L ) );
}

#if (_WIN32_WINNT >= 0x0501)

AFX_INLINE BOOL CEdit::GetCueBanner( LPWSTR lpszText, int cchText ) const
/***********************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_GETCUEBANNER, (WPARAM)lpszText, cchText ) );
}

AFX_INLINE BOOL CEdit::HideBalloonTip()
/*************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_HIDEBALLOONTIP, 0, 0L ) );
}

AFX_INLINE BOOL CEdit::SetCueBanner( LPCWSTR lpszText, BOOL fDrawWhenFocused )
/****************************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, EM_SETCUEBANNER, fDrawWhenFocused,
                                 (LPARAM)lpszText ) );
}

AFX_INLINE BOOL CEdit::ShowBalloonTip( PEDITBALLOONTIP pEditBalloonTip )
/**********************************************************************/
{
    ASSERT( pEditBalloonTip != NULL );
    pEditBalloonTip->cbStruct = sizeof( EDITBALLOONTIP );
    return( (BOOL)::SendMessage( m_hWnd, EM_SHOWBALLOONTIP, 0,
                                 (LPARAM)pEditBalloonTip ) );
}

#endif // (_WIN32_WINNT >= 0x0501)

AFX_INLINE int CListBox::AddString( LPCTSTR lpszItem )
/****************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_ADDSTRING, 0, (LPARAM)lpszItem ) );
}

AFX_INLINE int CListBox::DeleteString( UINT nIndex )
/**************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_DELETESTRING, nIndex, 0L ) );
}

AFX_INLINE int CListBox::Dir( UINT attr, LPCTSTR lpszWildCard )
/*************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_DIR, attr, (LPARAM)lpszWildCard ) );
}

AFX_INLINE int CListBox::FindString( int nStartAfter, LPCTSTR lpszItem ) const
/****************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_FINDSTRING, nStartAfter, (LPARAM)lpszItem ) );
}

AFX_INLINE int CListBox::FindStringExact( int nIndexStart, LPCTSTR lpszFind ) const
/*********************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_FINDSTRINGEXACT, nIndexStart,
                                (LPARAM)lpszFind ) );
}

AFX_INLINE int CListBox::GetAnchorIndex() const
/*********************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETANCHORINDEX, 0, 0L ) );
}

AFX_INLINE int CListBox::GetCaretIndex() const
/********************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETCARETINDEX, 0, 0L ) );
}

AFX_INLINE int CListBox::GetCount() const
/***************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETCOUNT, 0, 0L ) );
}

AFX_INLINE int CListBox::GetCurSel() const
/****************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETCURSEL, 0, 0L ) );
}

AFX_INLINE int CListBox::GetHorizontalExtent() const
/**************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETHORIZONTALEXTENT, 0, 0L ) );
}

AFX_INLINE DWORD_PTR CListBox::GetItemData( int nIndex ) const
/************************************************************/
{
    return( (DWORD_PTR)::SendMessage( m_hWnd, LB_GETITEMDATA, nIndex, 0L ) );
}

AFX_INLINE void *CListBox::GetItemDataPtr( int nIndex ) const
/***********************************************************/
{
    return( (void *)::SendMessage( m_hWnd, LB_GETITEMDATA, nIndex, 0L ) );
}

AFX_INLINE int CListBox::GetItemHeight( int nIndex ) const
/********************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETITEMHEIGHT, nIndex, 0L ) );
}

AFX_INLINE int CListBox::GetItemRect( int nIndex, LPRECT lpRect ) const
/*********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETITEMRECT, nIndex, (LPARAM)lpRect ) );
}

AFX_INLINE LCID CListBox::GetLocale() const
/*****************************************/
{
    return( (LCID)::SendMessage( m_hWnd, LB_GETLOCALE, 0, 0L ) );
}

AFX_INLINE int CListBox::GetSel( int nIndex ) const
/*************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETSEL, nIndex, 0L ) );
}

AFX_INLINE int CListBox::GetSelCount() const
/******************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETSELCOUNT, 0, 0L ) );
}

AFX_INLINE int CListBox::GetSelItems( int nMaxItems, LPINT rgIndex ) const
/************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETSELITEMS, nMaxItems, (LPARAM)rgIndex ) );
}

AFX_INLINE int CListBox::GetText( int nIndex, LPTSTR lpszBuffer ) const
/*********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETTEXT, nIndex, (LPARAM)lpszBuffer ) );
}

AFX_INLINE int CListBox::GetTextLen( int nIndex ) const
/*****************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETTEXTLEN, nIndex, 0L ) );
}

AFX_INLINE int CListBox::GetTopIndex() const
/******************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_GETTOPINDEX, 0, 0L ) );
}

AFX_INLINE int CListBox::InitStorage( int nItems, UINT nBytes )
/*************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_INITSTORAGE, nItems, nBytes ) );
}

AFX_INLINE int CListBox::InsertString( int nIndex, LPCTSTR lpszItem )
/*******************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_INSERTSTRING, nIndex, (LPARAM)lpszItem ) );
}

AFX_INLINE UINT CListBox::ItemFromPoint( CPoint pt, BOOL &bOutside ) const
/************************************************************************/
{
    DWORD dwRet = (DWORD)::SendMessage( m_hWnd, LB_ITEMFROMPOINT, 0,
                                        MAKELPARAM( pt.x, pt.y ) );
    bOutside = HIWORD( dwRet );
    return( (UINT)LOWORD( dwRet ) );
}

AFX_INLINE void CListBox::ResetContent()
/**************************************/
{
    ::SendMessage( m_hWnd, LB_RESETCONTENT, 0, 0L );
}

AFX_INLINE int CListBox::SelectString( int nStartAfter, LPCTSTR lpszItem )
/************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SELECTSTRING, nStartAfter,
                                (LPARAM)lpszItem ) );
}

AFX_INLINE int CListBox::SelItemRange( BOOL bSelect, int nFirstItem, int nLastItem )
/**********************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SELITEMRANGE, bSelect,
                                MAKELPARAM( nFirstItem, nLastItem ) ) );
}

AFX_INLINE void CListBox::SetAnchorIndex( int nIndex )
/****************************************************/
{
    ::SendMessage( m_hWnd, LB_SETANCHORINDEX, nIndex, 0L );
}

AFX_INLINE int CListBox::SetCaretIndex( int nIndex, BOOL bScroll )
/****************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETCARETINDEX, nIndex, bScroll ) );
}

AFX_INLINE void CListBox::SetColumnWidth( int cxWidth )
/*****************************************************/
{
    ::SendMessage( m_hWnd, LB_SETCOLUMNWIDTH, cxWidth, 0L );
}

AFX_INLINE int CListBox::SetCurSel( int nSelect )
/***********************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETCURSEL, nSelect, 0L ) );
}

AFX_INLINE void CListBox::SetHorizontalExtent( int cxExtent )
/***********************************************************/
{
    ::SendMessage( m_hWnd, LB_SETHORIZONTALEXTENT, cxExtent, 0L );
}

AFX_INLINE int CListBox::SetItemData( int nIndex, DWORD_PTR dwItemData )
/**********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETITEMDATA, nIndex, dwItemData ) );
}

AFX_INLINE int CListBox::SetItemDataPtr( int nIndex, void *pData )
/****************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETITEMDATA, nIndex, (LPARAM)pData ) );
}

AFX_INLINE int CListBox::SetItemHeight( int nIndex, UINT cyItemHeight )
/*********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETITEMHEIGHT, nIndex, cyItemHeight ) );
}

AFX_INLINE LCID CListBox::SetLocale( LCID nNewLocale )
/****************************************************/
{
    return( (LCID)::SendMessage( m_hWnd, LB_SETLOCALE, nNewLocale, 0L ) );
}

AFX_INLINE int CListBox::SetSel( int nIndex, BOOL bSelect )
/*********************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETSEL, bSelect, nIndex ) );
}

AFX_INLINE void CListBox::SetTabStops()
/*************************************/
{
    ::SendMessage( m_hWnd, LB_SETTABSTOPS, 0, 0L );
}

AFX_INLINE BOOL CListBox::SetTabStops( const int &cxEachStop )
/************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, LB_SETTABSTOPS, 1, (LPARAM)&cxEachStop ) );
}

AFX_INLINE BOOL CListBox::SetTabStops( int nTabStops, LPINT rgTabStops )
/**********************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, LB_SETTABSTOPS, nTabStops,
                                 (LPARAM)rgTabStops ) );
}

AFX_INLINE int CListBox::SetTopIndex( int nIndex )
/************************************************/
{
    return( (int)::SendMessage( m_hWnd, LB_SETTOPINDEX, nIndex, 0L ) );
}

AFX_INLINE int CComboBox::AddString( LPCTSTR lpszString )
/*******************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_ADDSTRING, 0, (LPARAM)lpszString ) );
}

AFX_INLINE void CComboBox::Clear()
/********************************/
{
    ::SendMessage( m_hWnd, WM_CLEAR, 0, 0L );
}

AFX_INLINE void CComboBox::Copy()
/*******************************/
{
    ::SendMessage( m_hWnd, WM_COPY, 0, 0L );
}

AFX_INLINE void CComboBox::Cut()
/******************************/
{
    ::SendMessage( m_hWnd, WM_CUT, 0, 0L );
}

AFX_INLINE int CComboBox::DeleteString( UINT nIndex )
/***************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_DELETESTRING, nIndex, 0L ) );
}

AFX_INLINE int CComboBox::Dir( UINT attr, LPCTSTR lpszWildCard )
/**************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_DIR, attr, (LPARAM)lpszWildCard ) );
}

AFX_INLINE int CComboBox::FindString( int nStartAfter, LPCTSTR lpszString ) const
/*******************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_FINDSTRING, nStartAfter,
                                (LPARAM)lpszString ) );
}

AFX_INLINE int CComboBox::FindStringExact( int nIndexStart, LPCTSTR lpszFind ) const
/**********************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_FINDSTRINGEXACT, nIndexStart,
                                (LPARAM)lpszFind ) );
}

AFX_INLINE int CComboBox::GetCount() const
/****************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETCOUNT, 0, 0L ) );
}

AFX_INLINE int CComboBox::GetCurSel() const
/*****************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETCURSEL, 0, 0L ) );
}

AFX_INLINE void CComboBox::GetDroppedControlRect( LPRECT lprect ) const
/*********************************************************************/
{
    ::SendMessage( m_hWnd, CB_GETDROPPEDCONTROLRECT, 0, (LPARAM)lprect );
}

AFX_INLINE BOOL CComboBox::GetDroppedState() const
/************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, CB_GETDROPPEDSTATE, 0, 0L ) );
}

AFX_INLINE int CComboBox::GetDroppedWidth() const
/***********************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETDROPPEDWIDTH, 0, 0L ) );
}

AFX_INLINE DWORD CComboBox::GetEditSel() const
/********************************************/
{
    return( (DWORD)::SendMessage( m_hWnd, CB_GETEDITSEL, 0, 0L ) );
}

AFX_INLINE BOOL CComboBox::GetExtendedUI() const
/**********************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, CB_GETEXTENDEDUI, 0, 0L ) );
}

AFX_INLINE UINT CComboBox::GetHorizontalExtent() const
/****************************************************/
{
    return( (UINT)::SendMessage( m_hWnd, CB_GETHORIZONTALEXTENT, 0, 0L ) );
}

AFX_INLINE DWORD_PTR CComboBox::GetItemData( int nIndex ) const
/*************************************************************/
{
    return( (DWORD_PTR)::SendMessage( m_hWnd, CB_GETITEMDATA, nIndex, 0L ) );
}

AFX_INLINE void *CComboBox::GetItemDataPtr( int nIndex ) const
/************************************************************/
{
    return( (void *)::SendMessage( m_hWnd, CB_GETITEMDATA, nIndex, 0L ) );
}

AFX_INLINE int CComboBox::GetItemHeight( int nIndex ) const
/*********************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETITEMHEIGHT, nIndex, 0L ) );
}

AFX_INLINE int CComboBox::GetLBText( int nIndex, LPTSTR lpszText ) const
/**********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETLBTEXT, nIndex, (LPARAM)lpszText ) );
}

AFX_INLINE int CComboBox::GetLBTextLen( int nIndex ) const
/********************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETLBTEXTLEN, nIndex, 0L ) );
}

AFX_INLINE LCID CComboBox::GetLocale() const
/******************************************/
{
    return( (LCID)::SendMessage( m_hWnd, CB_GETLOCALE, 0, 0L ) );
}

AFX_INLINE int CComboBox::GetTopIndex() const
/*******************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_GETTOPINDEX, 0, 0L ) );
}

AFX_INLINE int CComboBox::InitStorage( int nItems, UINT nBytes )
/**************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_INITSTORAGE, nItems, nBytes ) );
}

AFX_INLINE int CComboBox::InsertString( int nIndex, LPCTSTR lpszString )
/**********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_INSERTSTRING, nIndex, (LPARAM)lpszString ) );
}

AFX_INLINE BOOL CComboBox::LimitText( int nMaxChars )
/***************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, CB_LIMITTEXT, nMaxChars, 0L ) );
}

AFX_INLINE void CComboBox::Paste()
/********************************/
{
    ::SendMessage( m_hWnd, WM_PASTE, 0, 0L );
}

AFX_INLINE void CComboBox::ResetContent()
/***************************************/
{
    ::SendMessage( m_hWnd, LB_RESETCONTENT, 0, 0L );
}

AFX_INLINE int CComboBox::SelectString( int nStartAfter, LPCTSTR lpszString )
/***************************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SELECTSTRING, nStartAfter,
                                (LPARAM)lpszString ) );
}

AFX_INLINE int CComboBox::SetCurSel( int nSelect )
/************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETCURSEL, nSelect, 0L ) );
}

AFX_INLINE int CComboBox::SetDroppedWidth( UINT nWidth )
/******************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETDROPPEDWIDTH, nWidth, 0L ) );
}

AFX_INLINE BOOL CComboBox::SetEditSel( int nStartChar, int nEndChar )
/*******************************************************************/
{
    return( (BOOL)::SendMessage( m_hWnd, CB_SETEDITSEL, 0,
                                 MAKELPARAM( nStartChar, nEndChar ) ) );
}

AFX_INLINE int CComboBox::SetExtendedUI( BOOL bExtended )
/*******************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETEXTENDEDUI, bExtended, 0L ) );
}

AFX_INLINE void CComboBox::SetHorizontalExtent( UINT nExtent )
/************************************************************/
{
    ::SendMessage( m_hWnd, CB_SETHORIZONTALEXTENT, nExtent, 0L );
}

AFX_INLINE int CComboBox::SetItemData( int nIndex, DWORD_PTR dwItemData )
/***********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETITEMDATA, nIndex, dwItemData ) );
}

AFX_INLINE int CComboBox::SetItemDataPtr( int nIndex, void *pData )
/*****************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETITEMDATA, nIndex, (LPARAM)pData ) );
}

AFX_INLINE int CComboBox::SetItemHeight( int nIndex, UINT cyItemHeight )
/**********************************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETITEMHEIGHT, nIndex, cyItemHeight ) );
}

AFX_INLINE LCID CComboBox::SetLocale( LCID nNewLocale )
/*****************************************************/
{
    return( (LCID)::SendMessage( m_hWnd, CB_SETLOCALE, nNewLocale, 0L ) );
}

AFX_INLINE int CComboBox::SetTopIndex( int nIndex )
/*************************************************/
{
    return( (int)::SendMessage( m_hWnd, CB_SETTOPINDEX, nIndex, 0L ) );
}

AFX_INLINE void CComboBox::ShowDropDown( BOOL bShowIt )
/*****************************************************/
{
    ::SendMessage( m_hWnd, CB_SHOWDROPDOWN, bShowIt, 0L );
}

AFX_INLINE BOOL CScrollBar::EnableScrollBar( UINT nArrowFlags )
/*************************************************************/
{
    return( ::EnableScrollBar( m_hWnd, SB_CTL, nArrowFlags ) );
}

AFX_INLINE BOOL CScrollBar::GetScrollInfo( LPSCROLLINFO lpScrollInfo, UINT nMask )
/********************************************************************************/
{
    ASSERT( lpScrollInfo != NULL );
    lpScrollInfo->cbSize = sizeof( SCROLLINFO );
    lpScrollInfo->fMask = nMask;
    return( ::GetScrollInfo( m_hWnd, SB_CTL, lpScrollInfo ) );
}

AFX_INLINE int CScrollBar::GetScrollLimit()
/*****************************************/
{
    int nLimit;
    ::GetScrollRange( m_hWnd, SB_CTL, NULL, &nLimit );
    return( nLimit );
}

AFX_INLINE int CScrollBar::GetScrollPos() const
/*********************************************/
{
    return( (int)::GetScrollPos( m_hWnd, SB_CTL ) );
}

AFX_INLINE void CScrollBar::GetScrollRange( LPINT lpMinPos, LPINT lpMaxPos ) const
/********************************************************************************/
{
    ::GetScrollRange( m_hWnd, SB_CTL, lpMinPos, lpMaxPos );
}

AFX_INLINE BOOL CScrollBar::SetScrollInfo( LPSCROLLINFO lpScrollInfo, BOOL bRedraw )
/**********************************************************************************/
{
    ASSERT( lpScrollInfo != NULL );
    lpScrollInfo->cbSize = sizeof( SCROLLINFO );
    return( ::SetScrollInfo( m_hWnd, SB_CTL, lpScrollInfo, bRedraw ) );
}

AFX_INLINE int CScrollBar::SetScrollPos( int nPos, BOOL bRedraw )
/***************************************************************/
{
    return( ::SetScrollPos( m_hWnd, SB_CTL, nPos, bRedraw ) );
}

AFX_INLINE void CScrollBar::SetScrollRange( int nMinPos, int nMaxPos, BOOL bRedraw )
/**********************************************************************************/
{
    ::SetScrollRange( m_hWnd, SB_CTL, nMinPos, nMaxPos, bRedraw );
}

AFX_INLINE void CScrollBar::ShowScrollBar( BOOL bShow )
/*****************************************************/
{
    ::ShowScrollBar( m_hWnd, SB_CTL, bShow );
}

AFX_INLINE CDocTemplate *CDocument::GetDocTemplate() const
/********************************************************/
{
    return( m_pDocTemplate );
}

AFX_INLINE const CString &CDocument::GetPathName() const
/******************************************************/
{
    return( m_strPathName );
}

AFX_INLINE const CString &CDocument::GetTitle() const
/***************************************************/
{
    return( m_strTitle );
}

AFX_INLINE CDocument *CView::GetDocument() const
/**********************************************/
{
    return( m_pDocument );
}

AFX_INLINE int CWinThread::GetThreadPriority()
/********************************************/
{
    return( ::GetThreadPriority( m_hThread ) );
}

AFX_INLINE BOOL CWinThread::PostThreadMessage( UINT message, WPARAM wParam,
                                               LPARAM lParam )
/************************************************************/
{
    return( ::PostThreadMessage( m_nThreadID, message, wParam, lParam ) );
}

AFX_INLINE DWORD CWinThread::ResumeThread()
/*****************************************/
{
    return( ::ResumeThread( m_hThread ) );
}

AFX_INLINE BOOL CWinThread::SetThreadPriority( int nPriority )
/************************************************************/
{
    return( ::SetThreadPriority( m_hThread, nPriority ) );
}

AFX_INLINE DWORD CWinThread::SuspendThread()
/******************************************/
{
    return( ::SuspendThread( m_hThread ) );
}

AFX_INLINE CWinThread::operator HANDLE() const
/********************************************/
{
    return( this == NULL ? NULL : m_hThread );
}

AFX_INLINE void CWinApp::EnableHtmlHelp()
/***************************************/
{
    m_eHelpType = afxHTMLHelp;
}

AFX_INLINE AFX_HELP_TYPE CWinApp::GetHelpMode()
/*********************************************/
{
    return( m_eHelpType );
}

AFX_INLINE HCURSOR CWinApp::LoadCursor( LPCTSTR lpszResourceName ) const
/**********************************************************************/
{
    return( ::LoadCursor( AfxGetResourceHandle(), lpszResourceName ) );
}

AFX_INLINE HCURSOR CWinApp::LoadCursor( UINT nIDResource ) const
/**************************************************************/
{
    return( ::LoadCursor( AfxGetResourceHandle(), MAKEINTRESOURCE( nIDResource ) ) );
}

AFX_INLINE HICON CWinApp::LoadIcon( LPCTSTR lpszResourceName ) const
/******************************************************************/
{
    return( ::LoadIcon( AfxGetResourceHandle(), lpszResourceName ) );
}

AFX_INLINE HICON CWinApp::LoadIcon( UINT nIDResource ) const
/**********************************************************/
{
    return( ::LoadIcon( AfxGetResourceHandle(), MAKEINTRESOURCE( nIDResource ) ) );
}

AFX_INLINE HCURSOR CWinApp::LoadOEMCursor( UINT nIDCursor ) const
/***************************************************************/
{
    return( ::LoadCursor( NULL, MAKEINTRESOURCE( nIDCursor ) ) );
}

AFX_INLINE HICON CWinApp::LoadOEMIcon( UINT nIDIcon ) const
/*********************************************************/
{
    return( ::LoadIcon( NULL, MAKEINTRESOURCE( nIDIcon ) ) );
}

AFX_INLINE HCURSOR CWinApp::LoadStandardCursor( LPCTSTR lpszCursorName ) const
/****************************************************************************/
{
    return( ::LoadCursor( NULL, lpszCursorName ) );
}

AFX_INLINE HICON CWinApp::LoadStandardIcon( LPCTSTR lpszIconName ) const
/**********************************************************************/
{
    return( ::LoadIcon( NULL, lpszIconName ) );
}

AFX_INLINE void CWinApp::SetHelpMode( AFX_HELP_TYPE eHelpType )
/*************************************************************/
{
    m_eHelpType = eHelpType;
}

AFX_INLINE CWaitCursor::CWaitCursor()
/***********************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( 1 );
}

AFX_INLINE CWaitCursor::~CWaitCursor()
/************************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( -1 );
}

AFX_INLINE void CWaitCursor::Restore()
/************************************/
{
    CWinApp *pApp = AfxGetApp();
    ASSERT( pApp != NULL );
    pApp->DoWaitCursor( 0 );
}

AFX_INLINE void AfxFormatString1( CString &rString, UINT nIDS, LPCTSTR lpsz1 )
/****************************************************************************/
{
    rString.FormatMessage( nIDS, lpsz1 );
}

AFX_INLINE void AfxFormatString2( CString &rString, UINT nIDS, LPCTSTR lpsz1,
                                  LPCTSTR lpsz2 )
/***********************************************/
{
    rString.FormatMessage( nIDS, lpsz1, lpsz2 );
}

AFX_INLINE CWinApp * AFXAPI AfxGetApp()
/*************************************/
{
    AFX_MODULE_STATE *pState = AfxGetModuleState();
    ASSERT( pState != NULL );
    return( pState->m_pCurrentWinApp );
}

AFX_INLINE LPCTSTR AFXAPI AfxGetAppName()
/***************************************/
{
    AFX_MODULE_STATE *pState = AfxGetModuleState();
    ASSERT( pState != NULL );
    return( pState->m_lpszCurrentAppName );
}

AFX_INLINE HINSTANCE AFXAPI AfxGetInstanceHandle()
/************************************************/
{
    AFX_MODULE_STATE *pState = AfxGetModuleState();
    ASSERT( pState != NULL );
    return( pState->m_hCurrentInstanceHandle );
}

AFX_INLINE CWnd * AFXAPI AfxGetMainWnd()
/**************************************/
{
    CWinThread *pThread = AfxGetThread();
    if( pThread == NULL ) {
        return( NULL );
    }
    return( pThread->GetMainWnd() );
}

AFX_INLINE HINSTANCE AFXAPI AfxGetResourceHandle()
/************************************************/
{
    AFX_MODULE_STATE *pState = AfxGetModuleState();
    ASSERT( pState != NULL );
    return( pState->m_hCurrentResourceHandle );
}

AFX_INLINE CWinThread * AFXAPI AfxGetThread()
/*******************************************/
{
    AFX_MODULE_THREAD_STATE *pState = AfxGetModuleThreadState();
    ASSERT( pState != NULL );
    return( pState->m_pCurrentWinThread );
}

AFX_INLINE void AFXAPI AfxSetResourceHandle( HINSTANCE hInstResource )
/********************************************************************/
{
    AFX_MODULE_STATE *pState = AfxGetModuleState();
    ASSERT( pState != NULL );
    pState->m_hCurrentResourceHandle = hInstResource;
}
