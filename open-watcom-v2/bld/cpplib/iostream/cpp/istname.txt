  

******************************* ISTREAM **************************************

Filename: istconde.cpp
Declaration: 
    std::istream::istream()
Semantics: Protected constructor, making an istream without a streambuf
           attached.


Filename: istconsf.cpp
Declaration: 
    std::istream::istream( streambuf *sb ) : ios( sb )
Semantics: Public constructor, making an istream with a streambuf attached.


Filename: istcoist.cpp
Declaration: 
    std::istream::istream( istream const &istrm )
Semantics: Public copy constructor, make an istream with the istrm streambuf
           attached.


Filename: istdestr.cpp
Declaration: 
    std::istream::~istream()
Semantics: Destructor.


Filename: istcoesf.cpp
Declaration: 
    std::istream &std::istream::operator = ( streambuf *sb )
Semantics: *this is an istream that has been initialized, and may or may not
           have a streambuf associated with it.
           Associate the streambuf "sb" with the stream.


Filename: istcoeis.cpp
Declaration: 
    std::istream &std::istream::operator = ( istream const &istrm )
Semantics: *this is an istream that has been initialized, and may or may not
           have a streambuf associated with it.
           Associate the streambuf found in "istrm" with the stream.

Filename: istdread.cpp
Declaration: 
    std::istream &std::istream::do_read( char *buf, streamsize len )
Semantics: Read up to "len" characters from the stream and store them in
	   buffer "buf".

Filename: istipfx.cpp
Declaration: 
    int std::istream::ipfx( int noskipws )
Semantics: Input prefix.


Filename: istexpch.cpp
Declaration: 
    std::istream &std::istream::operator >> ( char *buf )
Semantics: Input a string of non-whitespace characters into the buffer.
           If the width is set, read a maximum of that many characters, less one
           for the NULLCHAR on the end.
           Otherwise, keep reading until EOF or a whitespace character.


Filename: istexcha.cpp
Declaration: 
    std::istream &std::istream::operator >> ( char &c )
Semantics: Input a character into "c".


Filename: istexssh.cpp
Declaration: 
    std::istream &std::istream::operator >> ( signed short &s )


Filename: istexush.cpp
Declaration: 
    std::istream &std::istream::operator >> ( unsigned short &s )


Filename: istexsin.cpp
Declaration: 
    std::istream &std::istream::operator >> ( signed int &i )


Filename: istexuin.cpp
Declaration: 
    std::istream &std::istream::operator >> ( unsigned int &i )


Filename: istgetul.cpp
Declaration:
    ios::iostate __getunsignedlong( streambuf *sb, unsigned long &value, 
            unsigned long maxval, signed long minval, ios::fmtflags format )


Filename: istgtu64.cpp
Declaration:
    ios::iostate __getunsignedint64( streambuf *sb, unsigned int64 &value, 
            unsigned int64 maxval, signed int64 minval, ios::fmtflags format )


Filename: istgsign.cpp
Declaration: 
    ios::iostate __getsign( streambuf *sb, char &sign, int &base )
Semantics: Examine the input for a + or - sign character.


Filename: istgbase.cpp
Declaration: 
    ios::iostate __getbase( streambuf *sb, int &base, streamsize &offset )


Filename: istgnm64.cpp
Declaration: 
    ios::iostate ____getnumberint64( streambuf *sb, unsigned __int64 &number,
    int base, streamsize &offset )
Semantics: Extract digits from the stream.
           Stop when a non-digit is found, leaving the non-digit in the stream.
           As digits are read, convert to an "unsigned int64".


Filename: istgnum.cpp
Declaration: 
    ios::iostate __getnumber( streambuf *sb, unsigned long &number,
    int base, streamsize &offset ) 
Semantics: Extract digits from the stream.
           Stop when a non-digit is found, leaving the non-digit in the stream.
           As digits are read, convert to an "unsigned long".

Filename: istexslo.cpp
Declaration: 
    std::istream &std::istream::operator >> ( signed long &l )


Filename: istexulo.cpp
Declaration: 
    std::istream &std::istream::operator >> ( unsigned long &l )


Filename: istexstf.cpp
Declaration: 
    std::istream &std::istream::operator >> ( streambuf *tgt_sb )
Semantics: Read all characters from the istream and write them to the streambuf.


Filename: istexiom.cpp
Declaration: 
    std::istream &std::istream::operator >> ( ios &(*f)( ios & ) )
Semantics: Handles things like cin >> ws where "ws" is a function taking
	   an ios reference and returning the same. Essentially, this just
	   does an indirect call to the function.


Filename: isteximn.cpp
Declaration: 
    std::istream &std::istream::operator >> ( istream &(*f)( istream & ) )
Semantics: Handles things like cin >> ws where "ws" is a function taking
	   an ios reference and returning the same. Essentially, this just
	   does an indirect call to the function.


Filename: istget.cpp
Declaration: 
    int std::istream::get()
Semantics: Extract a single character from the input stream.
           Don't set ios::failbit.


Filename: istgch.cpp
Declaration: 
    std::istream &std::istream::get( char &ch )
Semantics: Extract a single character and store it in "ch".


Filename: istgalin.cpp
Declaration: 
    ios::iostate __getaline( std::istream &istrm, char *buf, streamsize len,
    char delim, int is_get, streamsize &chars_read ) 
Semantics: Read characters into buffer "buf".
           At most "len - 1" characters are read, and a 0 is added at the end.
           If "delim" is encountered, it is left in the stream and the read is
           terminated (and the NULLCHAR is added).


Filename: istgpch.cpp
Declaration: 
    std::istream &std::istream::get( char *buf, streamsize len, char delim )


Filename: istgline.cpp
Declaration: 
    std::istream &std::istream::getline( char *buf, streamsize len, char delim )


Filename: istread.cpp
Declaration: 
    std::istream &std::istream::read( char *buf, streamsize len )
Semantics: Read up to "len" characters from the stream and store them in
	   buffer "buf".


Filename: istgstf.cpp
Declaration: 
    std::istream &std::istream::get( streambuf &tgt_sb, char delim )
Semantics: Extract characters from our streambuf and store them into the
           specified streambuf.


Filename: istignor.cpp
Declaration: 
    std::istream &std::istream::ignore( streamsize n, int delim )
Semantics: Ignore "n" characters, or until the specified delimiter is found,
           whichever comes first. If "delim" is EOF, don't look for a delimiter.
           As an extension, specifying a negative "n" value will not count
           ignored characters and will continue ignoring until the delimiter
           is found.


Filename: istpeek.cpp
Declaration: 
    int std::istream::peek()
Semantics: Return the next character without extracting it from the stream.


Filename: istpback.cpp
Declaration: 
    std::istream &std::istream::putback( char c )
Semantics: Put character in "c" back into the stream.


Filename: istsync.cpp
Declaration: 
    int std::istream::sync()
Semantics: Not inline because it is virtual


Filename: istsgstp.cpp
Declaration: 
    std::istream &std::istream::seekg( streampos pos )


Filename: istsgsto.cpp
Declaration: 
    std::istream &std::istream::seekg( streamoff offset, ios::seekdir dir )


Filename: isttellg.cpp
Declaration: 
    streampos std::istream::tellg()


Filename: isteatwh.cpp
Declaration: 
    void std::istream::eatwhite()
Semantics: Skip any leading whitespace characters.
