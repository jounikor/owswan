/***************************************************************************
 * FILE: stdint.h/cstdint (Various integer type definitions)
 *
:include crwat.sp
 *
 * Description: This header is part of the C99/C++ standard library. It
 *              describes a number of useful integer types.
 ***************************************************************************/
:segment CNAME
#ifndef _CSTDINT_INCLUDED
#define _CSTDINT_INCLUDED

:include readonly.sp

:include cpponly.sp
:elsesegment
#ifndef _STDINT_H_INCLUDED
#define _STDINT_H_INCLUDED

:include readonly.sp

:: In C++ .h header version import names into standard namespace
#ifdef __cplusplus

#include <cstdint>

using std::int8_t;
using std::uint8_t;
using std::int16_t;
using std::uint16_t;
using std::int32_t;
using std::uint32_t;
using std::int64_t;
using std::uint64_t;
using std::int_least8_t;
using std::uint_least8_t;
using std::int_least16_t;
using std::uint_least16_t;
using std::int_least32_t;
using std::uint_least32_t;
using std::int_least64_t;
using std::uint_least64_t;
using std::int_fast8_t;
using std::uint_fast8_t;
using std::int_fast16_t;
using std::uint_fast16_t;
using std::int_fast32_t;
using std::uint_fast32_t;
using std::int_fast64_t;
using std::uint_fast64_t;
using std::intptr_t;
using std::uintptr_t;
using std::intmax_t;
using std::uintmax_t;

#else /* __cplusplus not defined */
:: End .h version additions
:endsegment

/* Limit macros */

:: According to C99 these are only visible in C++ programs
:: if __STDC_LIMIT_MACROS is defined.
::
:segment CNAME
#ifdef __STDC_LIMIT_MACROS

:endsegment
/* Exact-width types. */
#define INT8_MIN   (-128)
#define INT8_MAX   127
#define INT16_MIN  (-32767-1)
#define INT16_MAX  32767
#define INT32_MIN  (-2147483647L-1)
#define INT32_MAX  2147483647L
#define INT64_MIN  (-9223372036854775807LL-1)
#define INT64_MAX  9223372036854775807LL

#define UINT8_MAX   255
:segment BITS16
#ifdef _M_I86
 #define UINT16_MAX  65535U
#else
:endsegment
 #define UINT16_MAX  65535
:segment BITS16
#endif
:endsegment
#define UINT32_MAX  4294967295UL
#define UINT64_MAX  18446744073709551615ULL

/* Minimum-width types. */
#define INT_LEAST8_MIN   (-128)
#define INT_LEAST8_MAX   127
#define INT_LEAST16_MIN  (-32767-1)
#define INT_LEAST16_MAX  32767
#define INT_LEAST32_MIN  (-2147483647L-1)
#define INT_LEAST32_MAX  2147483647L
#define INT_LEAST64_MIN  (-9223372036854775807LL-1)
#define INT_LEAST64_MAX  9223372036854775807LL

#define UINT_LEAST8_MAX   255
:segment BITS16
#ifdef _M_I86
 #define UINT_LEAST16_MAX  65535U
#else
:endsegment
 #define UINT_LEAST16_MAX  65535
:segment BITS16
#endif
:endsegment
#define UINT_LEAST32_MAX  4294967295UL
#define UINT_LEAST64_MAX  18446744073709551615ULL

/* Fast minimum-width types. */
:segment BITS16
#ifdef _M_I86
 #define INT_FAST8_MIN   (-32767-1)
 #define INT_FAST8_MAX   32767
 #define INT_FAST16_MIN  (-32767-1)
 #define INT_FAST16_MAX  32767
#else
:endsegment
 #define INT_FAST8_MIN   (-2147483647-1)
 #define INT_FAST8_MAX   2147483647
 #define INT_FAST16_MIN  (-2147483647-1)
 #define INT_FAST16_MAX  2147483647
:segment BITS16
#endif
:endsegment
#define INT_FAST32_MIN  (-2147483647L-1)
#define INT_FAST32_MAX  2147483647L
#define INT_FAST64_MIN  (-9223372036854775807LL-1)
#define INT_FAST64_MAX  9223372036854775807LL

:segment BITS16
#ifdef _M_I86
 #define UINT_FAST8_MAX   65535U
 #define UINT_FAST16_MAX  65535U
#else
:endsegment
 #define UINT_FAST8_MAX   4294967295U
 #define UINT_FAST16_MAX  4294967295U
:segment BITS16
#endif
:endsegment
#define UINT_FAST32_MAX  4294967295UL
#define UINT_FAST64_MAX  18446744073709551615ULL

/* Integer types able to hold object pointers. */
:segment BITS16
#ifdef _M_I86
 #if defined(__SMALL__) || defined(__MEDIUM__)
  #define INTPTR_MIN   (-32767-1)
  #define INTPTR_MAX   32767
  #define UINTPTR_MAX  65535U
 #else
  #define INTPTR_MIN   (-2147483647L-1)
  #define INTPTR_MAX   2147483647L
  #define UINTPTR_MAX  4294967295UL
 #endif
#else /* 32 bit */
:endsegment
 #if defined(__COMPACT__) || defined(__LARGE__)
  #define INTPTR_MIN   (-9223372036854775807LL-1)
  #define INTPTR_MAX   9223372036854775807LL
  #define UINTPTR_MAX  18446744073709551615ULL
 #else
  #define INTPTR_MIN   (-2147483647L-1)
  #define INTPTR_MAX   2147483647L
  #define UINTPTR_MAX  4294967295UL
 #endif
:segment BITS16
#endif
:endsegment

/* Greatest-width types. */
#define INTMAX_MIN   (-9223372036854775807LL-1)
#define INTMAX_MAX   9223372036854775807LL
#define UINTMAX_MAX  18446744073709551615ULL

/* Limits of wide character types */
:include wcharmax.sp
#define WINT_MIN        WCHAR_MIN
#define WINT_MAX        WCHAR_MAX

/* Limits of other integer types. */
:segment BITS16
#ifdef _M_I86
 #ifdef __HUGE__
  #define PTRDIFF_MIN    (-2147483647L-1)
  #define PTRDIFF_MAX    2147483647L
 #else
  #define PTRDIFF_MIN    (-32767-1)
  #define PTRDIFF_MAX    32767
 #endif
 #define SIG_ATOMIC_MIN  (-32767-1)
 #define SIG_ATOMIC_MAX  32767
 #define SIZE_MAX        65535U
#else /* 32 bit */
:endsegment
 #define PTRDIFF_MIN     (-2147483647-1)
 #define PTRDIFF_MAX     2147483647
 #define SIG_ATOMIC_MIN  (-2147483647-1)
 #define SIG_ATOMIC_MAX  2147483647
 #define SIZE_MAX        4294967295U
:segment BITS16
#endif
:endsegment

:segment CNAME
#endif /* Limit macros. */

:endsegment
/* Constant macros */

:: According to C99 these are only visible in C++ programs
:: if __STDC_CONSTANT_MACROS is defined.
::
:segment CNAME
#ifdef __STDC_CONSTANT_MACROS

:endsegment
#define INT8_C(__x)     (__x)
#define INT16_C(__x)    (__x)
#define INT32_C(__x)    (__x + (INT32_MAX - INT32_MAX))
#define INT64_C(__x)    (__x + (INT64_MAX - INT64_MAX))

#define UINT8_C(__x)    (__x)
#define UINT16_C(__x)   (__x)
#define UINT32_C(__x)   (__x + (UINT32_MAX - UINT32_MAX))
#define UINT64_C(__x)   (__x + (UINT64_MAX - UINT64_MAX))

#define INTMAX_C(__x)   (__x + (INT64_MAX - INT64_MAX))
#define UINTMAX_C(__x)  (__x + (UINT64_MAX - UINT64_MAX))

:segment CNAME
#endif /* Constant macros. */

:endsegment
:: In cname version place all these typedefs in std namespace
:include intptr_t.sp
:include uintptrt.sp

:include nsstd.sp
/* Exact-width types. */
:include exactint.sp

/* Minimum-width types. */
typedef signed   char      int_least8_t;
typedef signed   short     int_least16_t;
typedef signed   long      int_least32_t;
typedef signed   long long int_least64_t;

typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned long      uint_least32_t;
typedef unsigned long long uint_least64_t;

/* Fastest minimum-width types. */
typedef signed   int       int_fast8_t;
typedef signed   int       int_fast16_t;
typedef signed   long      int_fast32_t;
typedef signed   long long int_fast64_t;

typedef unsigned int       uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned long      uint_fast32_t;
typedef unsigned long long uint_fast64_t;

/* Greatest-width types. */
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
:include nsstdepi.sp

::::::::: Safer C :::::::::
:segment !CNAME
:include saferpro.sp

#if SIZE_MAX > 65535U
:: In 32-bit environments, objects up to 2GB are allowed. This could be
:: refined with OS-specific and possibly dynamically determined values.
 #define RSIZE_MAX      (SIZE_MAX >> 1)
#else
:: In 16-bit environments, anything up to SIZE_MAX is definitely valid!
 #define RSIZE_MAX      SIZE_MAX
#endif

:include saferepi.sp

:endsegment
::::::::: Safer C :::::::::
:segment !CNAME
#endif /* __cplusplus not defined */
:endsegment

#endif
