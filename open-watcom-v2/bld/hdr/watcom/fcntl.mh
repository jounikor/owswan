/*
 *  fcntl.h     File control options used by open
 *
:include crwatqnx.sp
 */
#ifndef _FCNTL_H_INCLUDED
#define _FCNTL_H_INCLUDED

:include readonly.sp

:include owrtlink.sp

:include cpluspro.sp

:segment LINUX
:include lnxkpack.sp
:elsesegment DOS | QNX | RDOS
:include pshpackl.sp
:endsegment

/*
 *  ISO C types
 */
:keep EXTWCHART
:include wchar_t.sp
:remove EXTWCHART
/*
 *  POSIX 1003.1 types
 */
:include off_t.sp
:include pid_t.sp
:segment DOS | QNX | RDOS
:include mode_t.sp

:endsegment
:segment LINUX
/*
 *  LINUX types
 */
:include ext.sp
:include loff_t.sp
:include extepi.sp

:include incdir.sp

#include _ARCH_INCLUDE(fcntl.h)

:endsegment
:include modedef.sp

:segment LINUX
/* For now Linux has synchronicity options for data and read operations.
 * We define the symbols here but let them do the same as O_SYNC since
 * this is a superset.
 */
:include ext.sp
#define O_DSYNC     O_SYNC  /* Synchronize data.  */
#define O_RSYNC     O_SYNC  /* Synchronize read operations.  */
:include extepi.sp

#define O_TEMP      000000  /*  Temporary file, don't put to disk (QNX thing) */
#define O_TEXT      000000  /*  Text file   (DOS thing)     */
#define O_BINARY    000000  /*  Binary file (DOS thing)     */

:elsesegment QNX
/*
 *  Flag values accessible to both open() and fcntl()
 *  (The first three can only be set by open)
 */

/*
 *  File access modes.
 */

#define O_RDONLY    000000  /*  Read-only mode  */
#define O_WRONLY    000001  /*  Write-only mode */
#define O_RDWR      000002  /*  Read-Write mode */

/*
 *  Mask for file access modes.
 */

#define O_ACCMODE   000003

/*
 *  File status flags used for open() and fcntl().
 */

#define O_NONBLOCK  000200  /*  Non-blocking I/O                */
#define O_APPEND    000010  /*  Append (writes guaranteed at the end)   */

/*
 *  The synchronous I/O status flags are taken from POSIX.4 (draft).
 *  This implementation doesn't fully support sync I/O (yet)
 *  (no function RTFSYNCH),
 *  but it does support the status flags for READ and WRITE.
 */

:include ext.sp
#define O_DSYNC     000020  /*  Data integrity synch    */
#define O_SYNC      000040  /*  File integrity synch    */
:include extepi.sp

#define O_PRIV      010000

/*
 *  oflag values for open()
 */

#define O_CREAT     000400  /*  Opens with file create      */
#define O_TRUNC     001000  /*  Open with truncation        */
#define O_EXCL      002000  /*  Exclusive open          */
#define O_NOCTTY    004000  /*  Don't assign a controlling terminal */

:include ext.sp
#define O_TEMP      010000  /*  Temporary file, don't put to disk   */
#define O_CACHE     020000  /*  Cache sequential files too      */
#define O_TEXT      000000  /*  Text file   (DOS thing)     */
#define O_BINARY    000000  /*  Binary file (DOS thing)     */
:include extepi.sp

/*
 *  fcntl() requests
 */

#define F_DUPFD     0       /*  Duplicate file descriptor   */
#define F_GETFD     1       /*  Get file descriptor flags   */
#define F_SETFD     2       /*  Set file descriptor flags   */
#define F_GETFL     3       /*  Get file status flags   */
#define F_SETFL     4       /*  Set file status flags   */
#define F_SETLK     6       /*  Set record locking info */
#define F_SETLKW    7       /*  Set record locking info;    */
#define F_CHKFL     8       /*              */
#define F_ALLOCSP   10      /*              */
#define F_FREESP    11      /*              */
#define F_ISSTREAM  13      /*              */
#define F_GETLK     14      /*  Get record locking info */
#define F_PRIV      15      /*              */
#define F_NPRIV     16      /*              */
#define F_QUOTACTL  17      /*              */
#define F_BLOCKS    18      /*              */
#define F_BLKSIZE   19      /*              */
#define F_RSETLK    20      /*              */
#define F_RGETLK    21      /*              */
#define F_RSETLKW   22      /*              */

/*
 *  File descriptor flags used for fcntl()
 */

#define FD_CLOEXEC  0x01    /*  Close on exec       */

/*
 *  l_type values for record locking with fcntl()
 */

#define F_RDLCK     1       /*  Shared or read lock     */
#define F_WRLCK     2       /*  Exclusive or write lock */
#define F_UNLCK     3       /*  Unlock          */

/*
 *  flock structure.
 */

typedef struct flock {
    short       l_type;
    short       l_whence;
    off_t       l_start;
    off_t       l_len;
    long        l_sysid;
    pid_t       l_pid;
#ifdef _M_I86
    short       l_pid_pad;
#endif
    short       zero[3];
} flock_t;

:elsesegment DOS | RDOS
#define O_RDONLY        0x0000  /* open for read only */
#define O_WRONLY        0x0001  /* open for write only */
#define O_RDWR          0x0002  /* open for read and write */
#define O_APPEND        0x0010  /* writes done at end of file */
#define O_CREAT         0x0020  /* create new file */
#define O_TRUNC         0x0040  /* truncate existing file */
#define O_NOINHERIT     0x0080  /* file is not inherited by child process */
#define O_TEXT          0x0100  /* text file */
#define O_BINARY        0x0200  /* binary file */
#define O_EXCL          0x0400  /* exclusive open */

:endsegment
:include ext.sp
#define _O_RDONLY       O_RDONLY
#define _O_WRONLY       O_WRONLY
#define _O_RDWR         O_RDWR
#define _O_APPEND       O_APPEND
#define _O_CREAT        O_CREAT
#define _O_TRUNC        O_TRUNC
:segment DOS | RDOS
#define _O_NOINHERIT    O_NOINHERIT
:endsegment
#define _O_TEXT         O_TEXT
#define _O_BINARY       O_BINARY
#define _O_EXCL         O_EXCL
:include extepi.sp

/*
 *  POSIX 1003.1 Prototypes.
 */
:include open.sp
:include creat.sp

:include ext.sp
:: MS extension version
:include sopen.sp

:keep ANSINAME
:include open.sp
:include creat.sp
:include sopen.sp
:remove ANSINAME

:: Wide character version
:keep WIDE
:segment DOS | LINUX | QNX
:include open.sp
:include creat.sp
:include sopen.sp
:endsegment
:remove WIDE
:include extepi.sp

:segment LINUX | QNX
_WCRTLINK extern int        fcntl( int __fildes, int __cmd, ... );

:endsegment
:segment QNX
struct _io_open; /* for C++ */

_WCRTLINK extern int        __fcntl_slib( int, int, int, struct flock * );
_WCRTLINK extern int        __open_slib( const char *__path, int __oflag, mode_t __mode );
_WCRTLINK extern int        __sopen_slib( const char *__path, int __oflag, int __share, mode_t __mode );
_WCRTLINK extern int        __resolve_net( unsigned, int, struct _io_open *, const char *, unsigned, char * );

:endsegment
:include poppack.sp

:include cplusepi.sp

#endif
