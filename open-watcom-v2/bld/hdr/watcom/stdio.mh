/**************************************************************************
 * FILE: stdio.h/cstdio (Standard I/O functions)
 *
:include crwatqnx.sp
 *
 * Description: This header is part of the C/C++ standard library. It
 *              describes the I/O facilities provided by the C standard.
 **************************************************************************/
:segment CNAME
#ifndef _CSTDIO_INCLUDED
#define _CSTDIO_INCLUDED

:include readonly.sp

:include cpponly.sp
:elsesegment
#ifndef _STDIO_H_INCLUDED
#define _STDIO_H_INCLUDED

:include readonly.sp

:: The following somewhat long segment only appears in stdio.h.
#ifdef __cplusplus

#include <cstdio>

// C99 types in stdio.h.
using std::FILE;
using std::fpos_t;
#ifndef _SIZE_T_DEFINED
#define _SIZE_T_DEFINED
 #define _SIZE_T_DEFINED_
 using std::size_t;
#endif

// C99 functions in stdio.h.
using std::clearerr;
using std::fclose;
using std::feof;
using std::ferror;
using std::fflush;
using std::fgetc;
using std::fgetpos;
using std::fgets;
using std::fopen;
using std::fprintf;
using std::fputc;
using std::fputs;
using std::fread;
using std::freopen;
using std::fscanf;
using std::fseek;
using std::fsetpos;
using std::ftell;
using std::fwrite;
using std::getc;
using std::getchar;
using std::gets;
using std::perror;
using std::printf;
using std::putc;
using std::putchar;
using std::puts;
using std::remove;
using std::rename;
using std::rewind;
using std::scanf;
using std::setbuf;
using std::setvbuf;
using std::sprintf;
using std::sscanf;
using std::tmpfile;
using std::tmpnam;
using std::ungetc;
using std::vfprintf;
using std::vprintf;
using std::vsprintf;

:: C99 functions in stdio.h that are currently considered extensions.
:include extc99.sp
using std::snprintf;
using std::vfscanf;
using std::vscanf;
using std::vsnprintf;
using std::vsscanf;
:include extepi.sp

::
:: Begin of extension section
::
:include ext.sp

// C99 types that are not specified for stdio.h
#ifndef _WINT_T_DEFINED
#define _WINT_T_DEFINED
 #define _WINT_T_DEFINED_
 using std::wint_t;
#endif

:: Wide character version
// C99 functions that are not specified for stdio.h
using std::fgetwc;
using std::fgetws;
using std::fputwc;
using std::fputws;
using std::fwprintf;
using std::fwscanf;
using std::getwc;
using std::getwchar;
using std::putwc;
using std::putwchar;
using std::swprintf;
using std::swscanf;
using std::ungetwc;
using std::vfwprintf;
using std::vfwscanf;
using std::vswprintf;
using std::vswscanf;
using std::vwprintf;
using std::vwscanf;
using std::wprintf;
using std::wscanf;

:include extepi.sp
::
:: End of extension section
::

#else /* __cplusplus not defined */
:: End of segment that is only in stdio.h
:endsegment

:include owrtlink.sp

:segment DOS
:include lfndos.sp

:elsesegment LINUX
:include systypes.sp

:endsegment
:: Only need extern "C" in cstdio
:segment CNAME
:include cpluspro.sp

:endsegment
:include pshpackl.sp

:include null.sp

:segment LINUX | QNX
#define _NFILES         16          /*  minimum guaranteed open files       */
:elsesegment DOS | RDOS
#define _NFILES         20          /*  minimum guaranteed open files       */
:endsegment
:segment LINUX | QNX | RDOS
#define BUFSIZ          4096        /*  Default buffer size                 */
:elsesegment DOS
#ifdef _M_I86
 #define BUFSIZ         512         /*  Default buffer size                 */
#else
 #define BUFSIZ         4096        /*  Default buffer size                 */
#endif
:endsegment

:keep FILENAMEMAX
:include maxpath.sp
:remove FILENAMEMAX

:segment DOS | RDOS
:keep PATHMAX
:include maxpath.sp
:remove PATHMAX

:endsegment
:segment LINUX | QNX
#define FOPEN_MAX   _NFILES
:elsesegment
:include ext.sp
 #define FOPEN_MAX      _NFILES
 #define OPEN_MAX       FOPEN_MAX
#else  /* extensions disabled */
 #define FOPEN_MAX      (_NFILES-2)
#endif /* extensions disabled */
:endsegment

:segment LINUX | QNX
/* values for _flag field in FILE struct */
:elsesegment
/* values for _flag field in FILE struct and _iomode array */
:endsegment

#define _READ   0x0001  /* file opened for reading */
#define _WRITE  0x0002  /* file opened for writing */
:segment LINUX | QNX
#define _UNGET  0x0100  /* ungetc has been done */
:elsesegment
#define _UNGET  0x0004  /* ungetc has been done */
:endsegment
#define _BIGBUF 0x0008  /* big buffer allocated */
#define _EOF    0x0010  /* EOF has occurred */
#define _SFERR  0x0020  /* error has occurred on this file */
#define _APPEND 0x0080  /* file opened for append */
:segment LINUX | QNX
#define _BINARY 0x0000  /* not required for POSIX QNX       */
#define _IOFBF  0x0000  /*  full buffering                  */
#define _IOLBF  0x0040  /*  line buffering                  */
#define _IONBF  0x0004  /*  no buffering                    */
:elsesegment
#define _BINARY 0x0040  /* file is binary, skip CRLF processing */
#define _IOFBF  0x0100  /* full buffering */
#define _IOLBF  0x0200  /* line buffering */
#define _IONBF  0x0400  /* no buffering */
:endsegment
#define _TMPFIL 0x0800  /* this is a temporary file */
#define _DIRTY  0x1000  /* buffer has been modified */
#define _ISTTY  0x2000  /* is console device */
#define _DYNAMIC 0x4000 /* FILE is dynamically allocated   */
#define _FILEEXT 0x8000 /* lseek with positive offset has been done */
#define _COMMIT 0x0001  /* extended flag: commit OS buffers on flush */

:include eof.sp

:include seekpos.sp

#define _NOT_ORIENTED   0               /* stream not yet oriented */
#define _BYTE_ORIENTED  1               /* byte-oriented stream */
#define _WIDE_ORIENTED  2               /* wide-oriented stream */

:: ISO C definition
#define TMP_MAX         (26*26*26)      /*  Max times tmpnam can be called  */
:segment LINUX | QNX
#define L_tmpnam        255             /*  Max length of tmp file names    */
:elsesegment
#define L_tmpnam        13              /*  Max length of tmp file names    */
:endsegment
:: POSIX definition
:include extunix.sp
#define L_cuserid       14              /*  Max length of login names       */
#define L_ctermid       16              /*  Max length of terminal names    */
:segment LINUX | QNX
#define P_tmpdir        "/usr/tmp"      /*  Temporary file directory        */
:elsesegment
#define P_tmpdir        "\\"            /* used by _tempnam */
#define wP_tmpdir       L"\\"           /* used by _wtempnam */
#define _P_tmpdir       P_tmpdir
#define _wP_tmpdir     wP_tmpdir
:endsegment
:include extepi.sp

:include size_t.sp

:include ssize_t.sp

:include _valist.sp

:keep DECLARE_STRUCT
:include file.sp
:remove DECLARE_STRUCT

:include fpos_t.sp

::
:: Begin of extension section
::
:include ext.sp

:include wchar_t.sp
:include wint_t.sp

:include extepi.sp
::
:: End of extension section
::

_WCRTLINK extern __w_FILE   *__get_iob_ptr( void );
#ifdef __FUNCTION_DATA_ACCESS
 #define __iob          (*__get_iob_ptr())
#elif defined(__SW_BR) || defined(_RTDLL)
 #define __iob          __iob_br
#endif

_WCRTLINK extern __w_FILE   *__get_std_file(unsigned __handle);

#ifndef __OBSCURE_STREAM_INTERNALS

_WCRTDATA extern __w_FILE  _WCDATA __iob[];
/*
 *  Define macros to access the three default file pointer (and descriptors)
 *  provided to each process by default. They will always occupy the
 *  first three file pointers in each processes' table.
 */
#define stdin   ((__w_FILE *)&__iob[0])     /* standard input file  */
#define stdout  ((__w_FILE *)&__iob[1])     /* standard output file */
#define stderr  ((__w_FILE *)&__iob[2])     /* standard error file  */
:segment DOS
:include ext.sp
#if defined(__DOS__) || defined(__WINDOWS__)
#define stdaux  ((__w_FILE *)&__iob[3])     /* standard auxiliary file  */
#define stdprn  ((__w_FILE *)&__iob[4])     /* standard printer file  */
#endif
:include extepi.sp
:endsegment

#else /* __OBSCURE_STREAM_INTERNALS is defined */

#define stdin   (__get_std_file(0))     /* standard input file  */
#define stdout  (__get_std_file(1))     /* standard output file */
#define stderr  (__get_std_file(2))     /* standard error file  */
:segment DOS
:include ext.sp
#if defined(__DOS__) || defined(__WINDOWS__)
#define stdaux  (__get_std_file(3))     /* standard auxiliary file  */
#define stdprn  (__get_std_file(4))     /* standard printer file  */
#endif
:include extepi.sp
:endsegment

#endif /* __OBSCURE_STREAM_INTERNALS */

:: Declarations of standard C99 functions (but see below for more information).
:include nsstd.sp
_WCRTLINK extern void       clearerr( FILE *__fp );
_WCRTLINK extern int        fclose( FILE *__fp );
_WCRTLINK extern int        feof( FILE *__fp );
_WCRTLINK extern int        ferror( FILE *__fp );
_WCRTLINK extern int        fflush( FILE *__fp );
_WCRTLINK extern int        fgetc( FILE *__fp );
_WCRTLINK extern int        fgetpos( FILE *__fp, fpos_t *__pos );
_WCRTLINK extern char       *fgets( char *__s, int __n, FILE *__fp );
_WCRTLINK extern FILE       *fopen( const char *__filename, const char *__mode );
_WCRTLINK extern int        fprintf( FILE *__fp, const char *__format, ... );
_WCRTLINK extern int        fputc( int __c, FILE *__fp );
_WCRTLINK extern int        fputs( const char *__s, FILE *__fp );
_WCRTLINK extern size_t     fread( void *__ptr, size_t __size, size_t __n, FILE *__fp );
_WCRTLINK extern FILE       *freopen( const char *__filename, const char *__mode, FILE *__fp );
_WCRTLINK extern int        fscanf( FILE*__fp, const char *__format, ... );
_WCRTLINK extern int        fseek( FILE *__fp, long __offset, int __whence );
_WCRTLINK extern int        fsetpos( FILE *__fp, const fpos_t *__pos );
_WCRTLINK extern long       ftell( FILE *__fp );
_WCRTLINK extern size_t     fwrite( const void *__ptr, size_t __size, size_t __n, FILE *__fp );
_WCRTLINK extern int        getc( FILE *__fp );
_WCRTLINK extern int        getchar( void );
:include extposix.sp
_WCRTLINK extern ssize_t    getdelim( char **__ptr1, size_t *__ptr2, int __delim, FILE *__fp);
_WCRTLINK extern ssize_t    getline( char **__ptr1, size_t *__ptr2, FILE *__fp);
:include extepi.sp
_WCRTLINK extern char       *gets( char *__s );
_WCRTLINK extern void       perror( const char *__s );
_WCRTLINK extern int        printf( const char *__format, ... );
_WCRTLINK extern int        putc( int __c, FILE *__fp );
_WCRTLINK extern int        putchar( int __c );
_WCRTLINK extern int        puts( const char *__s );
:include remove.sp
:include rename.sp
_WCRTLINK extern void       rewind( FILE *__fp );
_WCRTLINK extern int        scanf( const char *__format, ... );
_WCRTLINK extern void       setbuf( FILE *__fp, char *__buf );
_WCRTLINK extern int        setvbuf( FILE *__fp, char *__buf, int __mode, size_t __size );
_WCRTLINK extern int        sprintf( char *__s, const char *__format, ... );
_WCRTLINK extern int        sscanf( const char *__s, const char *__format, ... );
_WCRTLINK extern FILE       *tmpfile( void );
:include tmpnam.sp
_WCRTLINK extern int        ungetc( int __c, FILE *__fp );
_WCRTLINK extern int        vfprintf( FILE *__fp, const char *__format, __va_list __arg );
_WCRTLINK extern int        vprintf( const char *__format, __va_list __arg );
_WCRTLINK extern int        vsprintf( char *__s, const char *__format, __va_list __arg );

:: C99 functions in stdio.h that are currently considered extensions.
:include extc99.sp
_WCRTLINK extern int        snprintf( char *__buf, size_t __bufsize, const char *__fmt, ... );
_WCRTLINK extern int        vfscanf( FILE *__fp, const char *__format, __va_list __arg );
_WCRTLINK extern int        vscanf( const char *__format, __va_list __arg );
_WCRTLINK extern int        vsnprintf( char *__s, size_t __bufsize, const char *__format, __va_list __arg );
_WCRTLINK extern int        vsscanf( const char *__s, const char *__format, __va_list __arg );
:include extepi.sp
:include nsstdepi.sp

::
:: Begin of extension section
::
:include ext.sp

:: Implementation specific functions remain in the global namespace.
_WCRTLINK extern int        _getw( __w_FILE *__fp );
_WCRTLINK extern int        _pclose( __w_FILE *__fp );
_WCRTLINK extern __w_FILE   *_popen( const char *__command, const char *__mode );
_WCRTLINK extern int        _putw( int __binint, __w_FILE *__fp );
:include tempnam.sp
:keep ANSINAME
:include tempnam.sp
:remove ANSINAME

:: Wide character version
:include nsstd.sp
/* These names are not in stdio according to C99. */
_WCRTLINK extern wint_t     getwc( FILE * );
_WCRTLINK extern wint_t     getwchar( void );
_WCRTLINK extern wint_t     fgetwc( FILE * );
_WCRTLINK extern wchar_t    *fgetws( wchar_t *, int, FILE * );
_WCRTLINK extern wint_t     fputwc( wint_t, FILE * );
_WCRTLINK extern int        fputws( const wchar_t *, FILE * );
_WCRTLINK extern int        fwprintf( FILE *, const wchar_t *, ... );
_WCRTLINK extern int        fwscanf( FILE *, const wchar_t *, ... );
_WCRTLINK extern wint_t     putwc( wint_t, FILE * );
_WCRTLINK extern wint_t     putwchar( wint_t );
_WCRTLINK extern int        swprintf( wchar_t *, size_t, const wchar_t *, ... );
_WCRTLINK extern int        swscanf( const wchar_t *, const wchar_t *, ... );
_WCRTLINK extern wint_t     ungetwc( wint_t, FILE * );
_WCRTLINK extern int        vfwprintf( FILE *, const wchar_t *, __va_list );
_WCRTLINK extern int        vfwscanf( FILE *, const wchar_t *, __va_list );
_WCRTLINK extern int        vswprintf( wchar_t *, size_t, const wchar_t *, __va_list );
_WCRTLINK extern int        vswscanf( const wchar_t *, const wchar_t *, __va_list );
_WCRTLINK extern int        vwprintf( const wchar_t *, __va_list );
_WCRTLINK extern int        vwscanf( const wchar_t *, __va_list );
_WCRTLINK extern int        wprintf( const wchar_t *, ... );
_WCRTLINK extern int        wscanf( const wchar_t *, ... );
:include nsstdepi.sp

/* These names are not part of C89 or C99. */

:segment DOS | LINUX | QNX
_WCRTLINK extern int        _fseeki64( __w_FILE *__fp, long long __offset, int __whence );
_WCRTLINK extern long long  _ftelli64( __w_FILE *__fp );

:endsegment
:segment LINUX
_WCRTLINK extern int        fseeko( __w_FILE *__fp, off_t __offset, int __whence );
_WCRTLINK extern off_t      ftello( __w_FILE *__fp );

:endsegment
_WCRTLINK extern int        flushall( void );
:segment DOS | RDOS
_WCRTLINK extern __w_FILE   *_fdopen( int __handle, const char *__mode );
_WCRTLINK extern __w_FILE   *fdopen( int __handle, const char *__mode );
:endsegment
_WCRTLINK extern int        _bprintf( char *__buf, __w_size_t __bufsize, const char *__fmt, ... );
_WCRTLINK extern int        _fgetchar( void );
_WCRTLINK extern int        _fileno( __w_FILE * );
_WCRTLINK extern int        _fputchar( int __c );
_WCRTLINK extern __w_FILE   *_fsopen( const char *__filename, const char *__mode, int __shflag );
_WCRTLINK extern int        _grow_handles( int __new_count );
_WCRTLINK extern int        _snprintf( char *__buf, __w_size_t __bufsize, const char *__fmt, ... );
_WCRTLINK extern int        _vbprintf( char *__s, __w_size_t __bufsize, const char *__format, __va_list __arg );
_WCRTLINK extern int        _vsnprintf( char *__s, __w_size_t __bufsize, const char *__format, __va_list __arg );
_WCRTLINK extern int        fcloseall( void );
_WCRTLINK extern int        fgetchar( void );
_WCRTLINK extern int        fileno( __w_FILE * );
_WCRTLINK extern int        fputchar( int __c );

:: Wide character version
/* These functions pertain to wide character handling. */
_WCRTLINK extern int        _bwprintf( wchar_t *, __w_size_t, const wchar_t *, ... );
_WCRTLINK extern __w_wint_t _fgetwchar( void );
_WCRTLINK extern __w_wint_t _fputwchar( __w_wint_t );
_WCRTLINK extern wchar_t    *_getws( wchar_t * );
_WCRTLINK extern int        _putws( const wchar_t * );
_WCRTLINK extern int        _snwprintf( wchar_t *, __w_size_t, const wchar_t *, ... );
_WCRTLINK extern int        snwprintf( wchar_t *, __w_size_t, const wchar_t *, ... );
_WCRTLINK extern int        _swprintf( wchar_t *, const wchar_t *, ... );
_WCRTLINK extern __w_FILE   *_wfdopen( int, const wchar_t * );
_WCRTLINK extern __w_FILE   *_wfopen( const wchar_t *, const wchar_t * );
_WCRTLINK extern __w_FILE   *_wfreopen( const wchar_t *, const wchar_t *, __w_FILE * );
_WCRTLINK extern __w_FILE   *_wfsopen( const wchar_t *__filename, const wchar_t *__mode, int __shflag );
_WCRTLINK extern void       _wperror( const wchar_t * );
_WCRTLINK extern __w_FILE   *_wpopen( const wchar_t *__command, const wchar_t *__mode );
_WCRTLINK extern int        _vbwprintf( wchar_t *, __w_size_t, const wchar_t *, __va_list );
_WCRTLINK extern int        _vsnwprintf( wchar_t *, __w_size_t, const wchar_t *, __va_list );
_WCRTLINK extern int        vsnwprintf( wchar_t *, __w_size_t, const wchar_t *, __va_list );
_WCRTLINK extern int        _vswprintf( wchar_t *, const wchar_t *, __va_list );
_WCRTLINK extern __w_wint_t fgetwchar( void );
_WCRTLINK extern __w_wint_t fputwchar( __w_wint_t );
_WCRTLINK extern wchar_t    *getws( wchar_t * );
_WCRTLINK extern int        putws( const wchar_t * );
:keep WIDE
:segment DOS
:include remove.sp
:include rename.sp
:include tempnam.sp
:include tmpnam.sp
:endsegment
:remove WIDE

:segment QNX
#ifdef _this_belongs_in_a_private_qnx_header
_WCRTDATA extern int        _input_line_max;        /* defaults to 20 */
_WCRTLINK extern char       *input_line( __w_FILE *, char *, int );
#endif

:endsegment
:include extepi.sp

:segment LINUX | QNX
:include extunix.sp
_WCRTLINK extern char       *ctermid( char * );
_WCRTLINK extern char       *cuserid( char * );

_WCRTLINK extern __w_FILE   *fdopen( int __handle, const char *__mode );
_WCRTLINK extern __w_FILE   *popen( const char *__filename, const char *__mode );
_WCRTLINK extern int        pclose( __w_FILE *__stream );
:include extepi.sp

:endsegment
::
:: End of extension section
::
::
:: Eliminate all macro versions of these functions from cstdio
:: Eventually they can be re-introduced as proper in-line functions.
:segment !CNAME
#ifndef __OBSCURE_STREAM_INTERNALS
#define clearerr(__fp)  ((__fp)->_flag &= ~(_SFERR|_EOF))
#define feof(__fp)      ((__fp)->_flag & _EOF)
#define ferror(__fp)    ((__fp)->_flag & _SFERR)
#define fileno(__fp)    ((__fp)->_handle)
#define _fileno(__fp)   ((__fp)->_handle)
#endif
::
#if defined(__SW_BD) || defined(__SW_BM)
#define getc(__fp)      fgetc(__fp)
#define putc(__c,__fp)  fputc(__c,__fp)
#else
#ifndef __OBSCURE_STREAM_INTERNALS
#define getc(__fp) \
        ((__fp)->_cnt<=0 \
:segment DOS | RDOS
        || (unsigned)((*(__fp)->_ptr)-'\x0d')<=('\x1a'-'\x0d') \
:endsegment
        ? fgetc(__fp) \
        : ((__fp)->_cnt--,*(__fp)->_ptr++))
::
#define putc(__c,__fp) \
        ((__fp)->_flag&_IONBF \
        || (__fp)->_bufsize-(__fp)->_cnt<=1 \
        ? fputc(__c,__fp) \
        : ((*(__fp)->_ptr=(unsigned char)(__c))=='\n') \
        ? fputc('\n',__fp) \
        : ((__fp)->_flag|=_DIRTY,(__fp)->_cnt++,*(__fp)->_ptr++))
#endif
#endif
::
#define getchar()       getc(stdin)
#define putchar(__c)    putc(__c,stdout)

:endsegment
::::::::: Safer C :::::::::
:segment !CNAME
:include saferpro.sp

#define TMP_MAX_S   (26*26*26)      /* has to be same as TMP_MAX */

:segment LINUX | QNX
#define L_tmpnam_s  255             /* has to be same as L_tmpnam */
:elsesegment
#define L_tmpnam_s  13              /* has to be same as L_tmpnam */
:endsegment

:include rsize_t.sp

:include errno_t.sp

_WCRTLINK extern char     *gets_s( char *__s, rsize_t __n );
_WCRTLINK extern int      fprintf_s( FILE * __restrict __stream, const char * __restrict __format, ... );
_WCRTLINK extern int      fscanf_s( FILE * __restrict __stream, const char * __restrict __format, ... );
_WCRTLINK extern int      printf_s( const char * __restrict __format, ... );
_WCRTLINK extern int      scanf_s( const char * __restrict __format, ... );
_WCRTLINK extern int      snprintf_s( char * __restrict __s, rsize_t __n, const char * __restrict __format, ... );
_WCRTLINK extern int      sprintf_s( char * __restrict s, rsize_t __n, const char * __restrict __format, ... );
_WCRTLINK extern int      sscanf_s( const char * __restrict __s, const char * __restrict __format, ... );
_WCRTLINK extern int      vfprintf_s( FILE * __restrict __stream, const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vfscanf_s( FILE * __restrict __stream, const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vprintf_s( const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vscanf_s( const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsnprintf_s( char * __restrict __s, rsize_t __n, const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsprintf_s( char * __restrict __s, rsize_t __n, const char * __restrict __format, __va_list __arg );
_WCRTLINK extern int      vsscanf_s( const char * __restrict __s, const char * __restrict __format, __va_list __arg );
_WCRTLINK extern errno_t  fopen_s( FILE * __restrict * __restrict __streamptr, const char * __restrict __filename,
                                   const char * __restrict __mode);
_WCRTLINK extern errno_t  freopen_s( FILE * __restrict * __restrict __newstreamptr, const char * __restrict __filename,
                                     const char * __restrict __mode, FILE * __restrict __stream );
_WCRTLINK extern errno_t  tmpfile_s( FILE * __restrict * __restrict __streamptr);
_WCRTLINK extern errno_t  tmpnam_s( char *__s, rsize_t __maxsize );

:: Wide character version
/* These functions pertain to wide character handling. */
_WCRTLINK extern errno_t _wfopen_s( FILE * __restrict * __restrict __streamptr, const wchar_t * __restrict __filename,
                                    const wchar_t * __restrict __mode);
_WCRTLINK extern errno_t _wfreopen_s( FILE * __restrict * __restrict __newstreamptr, const wchar_t * __restrict __filename,
                                      const wchar_t * __restrict __mode, FILE * __restrict __stream );
_WCRTLINK extern errno_t _wtmpnam_s( wchar_t *__s, rsize_t __maxsize );

:include saferepi.sp

:endsegment
::::::::: Safer C :::::::::
:include poppack.sp

:segment CNAME
:include cplusepi.sp
:elsesegment
#endif /* __cplusplus not defined */
:endsegment

#endif
