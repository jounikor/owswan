/*
 *  sys/wait.h  POSIX Standard: Wait for Process Termination
 *
:include crwat.sp
 */
#ifndef _SYS_WAIT_H_INCLUDED
#define _SYS_WAIT_H_INCLUDED

:include readonly.sp

:include owrtlink.sp

#ifndef _SIGNAL_H_INCLUDED
 #include <signal.h>
#endif

:include cpluspro.sp

:include pid_t.sp
:include id_t.sp

typedef enum {
    P_ALL,          /* Wait for any child. */
    P_PID,          /* Wait for specified process. */
    P_PGID          /* Wait for members of process group. */
} idtype_t;

/*
 * Defined system wait types
 * Bits in the third argument to `waitpid'.
 */
#define WNOHANG             1           /* Don't block waiting.  */
:segment LINUX
#define WUNTRACED           2           /* Report status of stopped children.  */

#define __WALL              0x40000000  /* Wait for any child.  */
#define __WCLONE            0x80000000  /* Wait for cloned process.  */

#define WEXITSTATUS(__s)    (((__s) & 0xff00) >> 8)
#define WTERMSIG(__s)       ((__s) & 0x7f)
#define WSTOPSIG(__s)       (((__s) & 0xff00) >> 8)
#define WIFEXITED(__s)      (((__s) & 0x7f) == 0)
#define WIFSIGNALED(__s)    (((__s) & 0xff) != 0x7f && ((__s) & 0x7f) != 0)
#define WIFSTOPPED(__s)     (((__s) & 0xff) == 0x7f)
:elsesegment
#define WUNTRACED           0

#define WIFEXITED(__s)      (((__s) & 0x7f) == 0)
#define WIFSIGNALED(__s)    (((__s) & 0x7f) != 0)
#define WIFSTOPPED(__s)     (0)
#define WEXITSTATUS(__s)    (((__s) >> 8) & 0xff)
#define WTERMSIG(__s)       (((__s) & 0x7f))
#define WSTOPSIG(__s)       (0)
:endsegment

:include wait.sp
_WCRTLINK extern pid_t      waitpid( pid_t __pid, int *__stat_loc, int __options );

:include cplusepi.sp

#endif /* !_SYS_WAIT_H_INCLUDED */
