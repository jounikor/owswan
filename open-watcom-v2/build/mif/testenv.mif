.EXTENSIONS:
.EXTENSIONS: .exp .exe .dis .dib .dum .ls1 .lst .obj .ser .mer .err .i .i0 .i1 .p .gc .gcp .c .cpp .for .asm .src .mif
.mif: ..;$(mif_path)

!include testenv1.mif

!ifndef log_file
!  ifdef wasmtest_name
!    ifdef %WASMTEST_LOG_FILE
!      define log_file $+$(%WASMTEST_LOG_FILE)$-
!    else ifdef %WASMTEST_NAME
!      define log_file $(wasmtest_dir)/$+$(%WASMTEST_NAME)$-.log
!    else
!      define log_file $(wasmtest_dir)/$(wasmtest_name).log
!    endif
!  else ifdef ctest_name
!    ifdef %CTEST_LOG_FILE
!      define log_file $+$(%CTEST_LOG_FILE)$-
!    else ifdef %CTEST_NAME
!      define log_file $(ctest_dir)/$+$(%CTEST_NAME)$-.log
!    else
!      define log_file $(ctest_dir)/$(ctest_name).log
!    endif
!  else ifdef ftest_name
!    ifdef %FTEST_LOG_FILE
!      define log_file $+$(%FTEST_LOG_FILE)$-
!    else ifdef %FTEST_NAME
!      define log_file $(ftest_dir)/$+$(%FTEST_NAME)$-.log
!    else
!      define log_file $(ftest_dir)/$(ftest_name).log
!    endif
!  else ifdef plustest_name
!    ifdef %PLUSTEST_LOG_FILE
!      define log_file $+$(%PLUSTEST_LOG_FILE)$-
!    else ifdef %PLUSTEST_NAME
!      define log_file $(plustest_dir)/$+$(%PLUSTEST_NAME)$-.log
!    else
!      define log_file $(plustest_dir)/$(plustest_name).log
!    endif
!  else ifdef mathtest_name
!    ifdef %MATHTEST_LOG_FILE
!      define log_file $+$(%MATHTEST_LOG_FILE)$-
!    else ifdef %MATHTEST_NAME
!      define log_file $(mathtest_dir)/$+$(%MATHTEST_NAME)$-.log
!    else
!      define log_file $(mathtest_dir)/$(mathtest_name).log
!    endif
!  else ifdef clibtest_name
!    ifdef %CLIBTEST_LOG_FILE
!      define log_file $+$(%CLIBTEST_LOG_FILE)$-
!    else ifdef %CLIBTEST_NAME
!      define log_file $(clibtest_dir)/$+$(%CLIBTEST_NAME)$-.log
!    else
!      define log_file $(clibtest_dir)/$(clibtest_name).log
!    endif
!  endif
!endif

!ifdef clibtest_name
sav_file = $(clibtest_name).sav
!else
sav_file = s$(arch)_$(alt_error).sav
!endif

start : .SYMBOLIC .EXPLICIT
!ifdef dll_loaded
! ifdef wasmtest_name
! else ifdef ctest_name
    @echo using !loaddll $(dll_wcc_$(arch))
! else ifdef ftest_name
    @echo using !loaddll $(dll_wfc_$(arch))
! else ifdef plustest_name
    @echo using !loaddll $(dll_wpp_$(arch))
! else ifdef mathtest_name
    @echo using !loaddll $(dll_wcc_$(arch))
! else ifdef clibtest_name
    @echo using !loaddll $(dll_wcc_$(arch))
! endif
!endif
    @%append $(log_file) ==== $(%__CTIME__) $(%__CWD__) ====
!ifdef clibtest_name
! ifeq verbose 0
    @echo TEST $(clibtest_name)
! endif
    $(noecho)%append $(log_file) TEST $(clibtest_name)
!else
! ifeq verbose 0
    @echo TEST $(arch)/$(alt_error)
! endif
    $(noecho)%append $(log_file) TEST $(arch)/$(alt_error)
!endif
    $(noecho)%make clean
    $(noecho)%make __clean_sav
    @set ERROR_FILE=exec.out
    $(noecho)%create $(%ERROR_FILE)

test.lnk : $(__MAKEFILES__) .EXPLICIT
    $(noecho)%create $@
    @%append $@ $(targ_ldb_$(targ_env_$(arch)))
    @%append $@ $(targ_lnk_$(targ_env_$(arch)))
    @%append $@ $(lnk_any)
    @%append $@ $(stack_$(arch))

.c.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wcc
    @%make echo_cc
    $(noecho)$(wcc_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.cpp.obj:
    @set ERROR_MSG=failure to compile $@
    @%make set_path_wpp
    @%make echo_cxx
    $(noecho)$(wpp_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.for.obj:
    @set ERROR_MSG=failure to compile $@
    @%make set_path_wfc
    @%make echo_wfc
    $(noecho)$(wfc_$(arch)) $[@ $(fflags_$(arch)) $(opt_$^*) -FO=.obj
    @%make set_old_path

.asm.obj:
    @set ERROR_MSG=failure to compile $@
    %write xxxxxxxx.tmp  -zld -wx -nm=$[@ $(asm_flags_$^&) $[@ -fr=$^&.out -fo=$@
    @%make echo_as
    -$(noecho)$(wasm_$(arch)) @xxxxxxxx.tmp
    @%create tmp.tmp
    @if not exist $^&.out @%create $^&.out
    @set CHK_CHECK=diff -i -b $^&.out tmp.tmp
    @if exist $^&.chk @set CHK_CHECK=diff -i -b $^&.out $^&.chk
    $(%CHK_CHECK)
    @%append $(%ERROR_FILE) PASS compiling $[@
    @if not exist $@ @%create $@

# Rule for compiling via preprocessor
.p.obj:
    @set ERROR_MSG=failure to preprocess $@
    @%make set_path_wcc
    $(wcc_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -pl -fo=.i
    @set ERROR_MSG=failure to compile $[&.i
    $(wcc_$(arch)) $[&.i $(test_flags) $(test_flags_$(arch)) $(opt_$^*) $(opt_EH_$(EH_$^*)) -fo=.obj
    @%make set_old_path

.obj.dis:
    set ERROR_MSG=failure to decode $[@
    $(buildtest_prefix)wdis -l=$@ -a -ff $[@
    if exist $^&.esm diff -i -b $^&.dis $^&.esm
    $(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$^&.lst
    if exist $^&.emp diff -i -b $^&.lst $^&.emp
    %append $(%ERROR_FILE) PASS decoding $[@

.obj.dib:
    @set ERROR_MSG=failure to decode $[@
    $(buildtest_prefix)wdis -l=$@ -ff $[@
    @if exist $^&.esm diff -i -b $^&.dib $^&.esm
    $(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$^&.lst
    @if exist $^&.emp diff -i -b $^&.lst $^&.emp
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.dum: .SYMBOLIC
    @set ERROR_MSG=failure to decode $[@
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.ls1:
    @set ERROR_MSG=failure to decode $[@
    @%make echo_wdis
    $(noecho)$(buildtest_prefix)wdis -a $[@ | sed -f $(wasmtest_dir)/fixlst2.sed | awk -f $(wasmtest_dir)/fixlst3.awk -v OUTFILE=$^.
    @set CHK_CHECK=$(noecho)diff -i -b $@ $(wasmtest_dir)/inline/$^&.asm
    @if exist $(wasmtest_dir)/inline/$^&.chk @set CHK_CHECK=$(noecho)diff -i -b $@ $(wasmtest_dir)/inline/$^&.chk
    @%make echo_diff
    $(%CHK_CHECK)
    @%append $(%ERROR_FILE) PASS decoding $[@

.obj.lst:
    @set ERROR_MSG=failure to decode $[@
    @%make echo_wdis
    -$(noecho)$(buildtest_prefix)wdis -a $[@ | sed -f $(wasmtest_dir)/fixlst2.sed $(extra_sed_$^*) >$^&.dis
    @if exist $(wasmtest_dir)/inline/$^&.esm @%make echo_diff
    @if exist $(wasmtest_dir)/inline/$^&.esm $(noecho)diff -i -b $^&.dis $(wasmtest_dir)/inline/$^&.esm
    @%make echo_dmpobj
    -$(noecho)$(buildtest_prefix)dmpobj -q -rec=FIXUPP $[@ | sed -f $(wasmtest_dir)/fixlst1.sed >$@
    @if exist $(wasmtest_dir)/inline/$^&.emp @%make echo_diff
    @if exist $(wasmtest_dir)/inline/$^&.emp $(noecho)diff -i -b $@ $(wasmtest_dir)/inline/$^&.emp
    @%append $(%ERROR_FILE) PASS decoding $[@


!ifdef inline_assembly
.gc.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wcc
    @%make echo_cc
    $(noecho)$(wcc_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) -fo=.obj
    @%make set_old_path
    @%append $(%ERROR_FILE) PASS compiling $^&

.gcp.obj:
    @set ERROR_MSG=failure to compile $^&
    @%make set_path_wpp
    @%make echo_cxx
    $(noecho)$(wpp_$(arch)) $[@ $(test_flags) $(test_flags_$(arch)) $(opt_$^*) -fo=.obj
    @%make set_old_path
    @%append $(%ERROR_FILE) PASS compiling $^&

!ifdef plustest_name
.asm.gcp:
    @set ERROR_MSG=failure to create $^.
    @*awk -v target=$(init_$^&) -f $(wasmtest_dir)/createc.awk -v OUTFILE=$^. $[@

.src.gcp:
    @copy $< $@
!else
.asm.gc:
    @set ERROR_MSG=failure to create $^.
    @*awk -v target=$(init_$^&) -f $(wasmtest_dir)/createc.awk -v OUTFILE=$^. $[@

.src.gc:
    @copy $< $@
!endif

!endif

.c.err:
!ifdef plustest_name
    @%make set_path_wpp
    -$(wpp_$(arch)) $[@ $(diagnose_opts) -fip $(opt_$^&) $(archdep_opts) -fo=.obj
!else
    @%make set_path_wcc
    -$(wcc_$(arch)) $< $(diagnose_opts) $(opt_$^&) $(archdep_opts) -fo=.obj
!endif
    @%make set_old_path
    @if not exist $@ %write $@ I did not generate errors for $^&

.c.ser:
!ifdef plustest_name
    @%make set_path_wpp
    -$(wpp_$(arch)) $[@ $(diagnose_opts) -fip $(opt_$^&) $(archdep_opts) -fr=.ser -fo=.obj
!else
    @%make set_path_wcc
    -$(wcc_$(arch)) $< $(diagnose_opts) $(opt_$^&) $(archdep_opts) -fr=.ser -fo=.obj
!endif
    @%make set_old_path
    @if not exist $@ %write $@ I did not generate errors for $^&

dos_redirect_dosi86 = 1
dos_redirect_wnti86 = 1
dos_redirect_cw386  = 1
dos_redirect_d4g386 = 1
dos_redirect_pls386 = 1
dos_redirect_tnt386 = 1

!ifdef __DOS__
dos_redirect = 1
!else ifdef dos_redirect_$(targ_env_$(arch))
dos_redirect = $(dos_redirect_$(targ_env_$(arch)))
!endif

.obj.$(exe):
    @set ERROR_MSG=*** failure to link $^&
    @%make set_path_wlink
    @%make echo_link
    $(noecho)$(linker) @test.lnk $(opt_link) $(opt_link_$^*) NAME $@ FILE {$<}
    @%append $(%ERROR_FILE) PASS compiling $^&
    @set ERROR_MSG=FAIL executing $^&
    @%make set_run_path
!ifdef dos_redirect
    -$(run) $(exec_prefix)$@ $(extra_run_$^*) >$*.out
!else
    -$(run) $(exec_prefix)$@ $(extra_run_$^*) >$*.out 2>&1
!endif
    @if not errorlevel 1 @set ERROR_MSG=PASS executing $^&
    @%make set_old_run_path
!ifdef ftest_name
    @%make echo_diff
    $(noecho)diff $*.out expected/$*.chk >>exec.out
!else
    -@cat $*.out >>exec.out
!endif
    @%append $(%ERROR_FILE) $(%ERROR_MSG)

./chk_exec.exe : $(watcom_dir)/c/chk_exec.c .EXPLICIT
    $(noecho)$(bld_cl) $(bld_cl_opts) $(bld_extra_defines) $<

./chktest.exe : $(watcom_dir)/c/chktest.c .EXPLICIT
    $(noecho)$(bld_cl) $(bld_cl_opts) $<

./catfile.exe: $(watcom_dir)/c/catfile.c .EXPLICIT
    $(noecho)$(bld_cl) $(bld_cl_opts) $<

__save_sav : .procedure .EXPLICIT
    @if exist $(sav_file) rm $(sav_file)
    @if exist exec.out %ren exec.out $(sav_file) >$(nulldevice)
!ifdef sav_file_2
    @if exist $(sav_file_2) rm $(sav_file_2)
    @if exist exec2.out %ren exec2.out $(sav_file_2) >$(nulldevice)
!endif

__clean_sav : .procedure .EXPLICIT
    @if exist $(sav_file) rm $(sav_file)
!ifdef sav_file_2
    @if exist $(sav_file_2) rm $(sav_file_2)
!endif

__set_pass : .procedure .EXPLICIT
    $(noecho)%make __clean_sav
    @set ERROR_MSG=PASS $(%__CWD__)
    @if exist $(failures_log) rm $(failures_log)
    $(noecho)%make clean

__check_result : .procedure .EXPLICIT
!if defined( dos_redirect ) && defined( dos_exec_chk_$(arch) )
    -diff -b $(sav_file) $(dos_exec_chk_$(arch)) >$(nulldevice)
!else ifdef exec_chk_$(arch)
    -diff -b $(sav_file) $(exec_chk_$(arch)) >$(nulldevice)
!else
    -diff -b $(sav_file) exec.chk >$(nulldevice)
!endif

__check_result_display : .procedure .EXPLICIT
!if defined( dos_redirect ) && defined( dos_exec_chk_$(arch) )
    -diff -b $(sav_file) $(dos_exec_chk_$(arch))
!else ifdef exec_chk_$(arch)
    -diff -b $(sav_file) $(exec_chk_$(arch))
!else
    -diff -b $(sav_file) exec.chk
!endif

common_set_result : .procedure .EXPLICIT
    @set ERROR_FILE=$(log_file)
    @set ERROR_MSG=FAIL $(%__CWD__)
    $(noecho)%make __save_sav
    $(noecho)%make __check_result
    @if not errorlevel 1 $(noecho)%make __set_pass
    %append $(log_file) $(%ERROR_MSG)

common_set_result_display : .procedure .EXPLICIT
    @set ERROR_FILE=$(log_file)
    @set ERROR_MSG=FAIL $(%__CWD__)
    $(noecho)%make __save_sav
    $(noecho)%make __check_result_display
    @if not errorlevel 1 $(noecho)%make __set_pass
    %append $(log_file) $(%ERROR_MSG)

common_set_result_check : .procedure .EXPLICIT
    @set ERROR_FILE=$(log_file)
    @set ERROR_MSG=FAIL $(%__CWD__)
    $(noecho)%make __save_sav
    $(noecho)%make check_result
    @if not errorlevel 1 $(noecho)%make __set_pass
    %append $(log_file) $(%ERROR_MSG)

full_set_result : .procedure .EXPLICIT
    @set ERROR_FILE=$(log_file)
    @set ERROR_MSG=FAIL $(%__CWD__)
    @%append $(log_file) ==== $(%__CTIME__) $(%__CWD__) ====
    -$]@ $(log_file) >$(nulldevice)
    @if not errorlevel 1 @set ERROR_MSG=PASS $(%__CWD__)
    @%append $(log_file) TEST
    %append $(log_file) $(%ERROR_MSG)
